
Interfacing_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000024a2  00002536  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080006c  0080006c  00002542  2**0
                  ALLOC
  3 .stab         000016a4  00000000  00000000  00002544  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000975  00000000  00000000  00003be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000455d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000469d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000480d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006456  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007341  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000080f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008250  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000084dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008cab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__vector_1>
       8:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__vector_2>
       c:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 37       	cpi	r26, 0x73	; 115
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 52 06 	call	0xca4	; 0xca4 <main>
      8a:	0c 94 4f 12 	jmp	0x249e	; 0x249e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 18 12 	jmp	0x2430	; 0x2430 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 34 12 	jmp	0x2468	; 0x2468 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 24 12 	jmp	0x2448	; 0x2448 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 40 12 	jmp	0x2480	; 0x2480 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 24 12 	jmp	0x2448	; 0x2448 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 40 12 	jmp	0x2480	; 0x2480 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 18 12 	jmp	0x2430	; 0x2430 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 34 12 	jmp	0x2468	; 0x2468 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 24 12 	jmp	0x2448	; 0x2448 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 40 12 	jmp	0x2480	; 0x2480 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 24 12 	jmp	0x2448	; 0x2448 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 40 12 	jmp	0x2480	; 0x2480 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 24 12 	jmp	0x2448	; 0x2448 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 40 12 	jmp	0x2480	; 0x2480 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 44 12 	jmp	0x2488	; 0x2488 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_7>:
void reset (void);
void Set_buttons_Iint(void);

//ISR
ISR(TIMER1_COMPA_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if(mode)
     b70:	80 91 68 00 	lds	r24, 0x0068
     b74:	88 23       	and	r24, r24
     b76:	19 f0       	breq	.+6      	; 0xb7e <__vector_7+0x38>
	{
		sec_increment();
     b78:	0e 94 21 11 	call	0x2242	; 0x2242 <sec_increment>
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <__vector_7+0x3c>
	}
	else
	{
		sec_decrement();
     b7e:	0e 94 9a 11 	call	0x2334	; 0x2334 <sec_decrement>
	}
}
     b82:	cf 91       	pop	r28
     b84:	df 91       	pop	r29
     b86:	ff 91       	pop	r31
     b88:	ef 91       	pop	r30
     b8a:	bf 91       	pop	r27
     b8c:	af 91       	pop	r26
     b8e:	9f 91       	pop	r25
     b90:	8f 91       	pop	r24
     b92:	7f 91       	pop	r23
     b94:	6f 91       	pop	r22
     b96:	5f 91       	pop	r21
     b98:	4f 91       	pop	r20
     b9a:	3f 91       	pop	r19
     b9c:	2f 91       	pop	r18
     b9e:	0f 90       	pop	r0
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	0f 90       	pop	r0
     ba4:	1f 90       	pop	r1
     ba6:	18 95       	reti

00000ba8 <__vector_1>:
ISR(INT0_vect)
{
     ba8:	1f 92       	push	r1
     baa:	0f 92       	push	r0
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	0f 92       	push	r0
     bb0:	11 24       	eor	r1, r1
     bb2:	2f 93       	push	r18
     bb4:	3f 93       	push	r19
     bb6:	4f 93       	push	r20
     bb8:	5f 93       	push	r21
     bba:	6f 93       	push	r22
     bbc:	7f 93       	push	r23
     bbe:	8f 93       	push	r24
     bc0:	9f 93       	push	r25
     bc2:	af 93       	push	r26
     bc4:	bf 93       	push	r27
     bc6:	ef 93       	push	r30
     bc8:	ff 93       	push	r31
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
	reset();
     bd2:	0e 94 05 12 	call	0x240a	; 0x240a <reset>
}
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	ff 91       	pop	r31
     bdc:	ef 91       	pop	r30
     bde:	bf 91       	pop	r27
     be0:	af 91       	pop	r26
     be2:	9f 91       	pop	r25
     be4:	8f 91       	pop	r24
     be6:	7f 91       	pop	r23
     be8:	6f 91       	pop	r22
     bea:	5f 91       	pop	r21
     bec:	4f 91       	pop	r20
     bee:	3f 91       	pop	r19
     bf0:	2f 91       	pop	r18
     bf2:	0f 90       	pop	r0
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	0f 90       	pop	r0
     bf8:	1f 90       	pop	r1
     bfa:	18 95       	reti

00000bfc <__vector_2>:
ISR(INT1_vect)
{
     bfc:	1f 92       	push	r1
     bfe:	0f 92       	push	r0
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	0f 92       	push	r0
     c04:	11 24       	eor	r1, r1
     c06:	2f 93       	push	r18
     c08:	3f 93       	push	r19
     c0a:	4f 93       	push	r20
     c0c:	5f 93       	push	r21
     c0e:	6f 93       	push	r22
     c10:	7f 93       	push	r23
     c12:	8f 93       	push	r24
     c14:	9f 93       	push	r25
     c16:	af 93       	push	r26
     c18:	bf 93       	push	r27
     c1a:	ef 93       	push	r30
     c1c:	ff 93       	push	r31
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
	pause();
     c26:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <pause>
}
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	ff 91       	pop	r31
     c30:	ef 91       	pop	r30
     c32:	bf 91       	pop	r27
     c34:	af 91       	pop	r26
     c36:	9f 91       	pop	r25
     c38:	8f 91       	pop	r24
     c3a:	7f 91       	pop	r23
     c3c:	6f 91       	pop	r22
     c3e:	5f 91       	pop	r21
     c40:	4f 91       	pop	r20
     c42:	3f 91       	pop	r19
     c44:	2f 91       	pop	r18
     c46:	0f 90       	pop	r0
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	0f 90       	pop	r0
     c4c:	1f 90       	pop	r1
     c4e:	18 95       	reti

00000c50 <__vector_3>:
ISR(INT2_vect)
{
     c50:	1f 92       	push	r1
     c52:	0f 92       	push	r0
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	0f 92       	push	r0
     c58:	11 24       	eor	r1, r1
     c5a:	2f 93       	push	r18
     c5c:	3f 93       	push	r19
     c5e:	4f 93       	push	r20
     c60:	5f 93       	push	r21
     c62:	6f 93       	push	r22
     c64:	7f 93       	push	r23
     c66:	8f 93       	push	r24
     c68:	9f 93       	push	r25
     c6a:	af 93       	push	r26
     c6c:	bf 93       	push	r27
     c6e:	ef 93       	push	r30
     c70:	ff 93       	push	r31
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
	resume();
     c7a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <resume>
}
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	ff 91       	pop	r31
     c84:	ef 91       	pop	r30
     c86:	bf 91       	pop	r27
     c88:	af 91       	pop	r26
     c8a:	9f 91       	pop	r25
     c8c:	8f 91       	pop	r24
     c8e:	7f 91       	pop	r23
     c90:	6f 91       	pop	r22
     c92:	5f 91       	pop	r21
     c94:	4f 91       	pop	r20
     c96:	3f 91       	pop	r19
     c98:	2f 91       	pop	r18
     c9a:	0f 90       	pop	r0
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	0f 90       	pop	r0
     ca0:	1f 90       	pop	r1
     ca2:	18 95       	reti

00000ca4 <main>:

//Main code
int main(void)
{
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	df 93       	push	r29
     caa:	cf 93       	push	r28
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	c6 5b       	subi	r28, 0xB6	; 182
     cb2:	d0 40       	sbci	r29, 0x00	; 0
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
	//Initialization
	Timer1_Init();
     cbe:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <Timer1_Init>
	Segment_Iint();
     cc2:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <Segment_Iint>
	Mode_button_Iint();
     cc6:	0e 94 0a 10 	call	0x2014	; 0x2014 <Mode_button_Iint>
	Mode_led_Iint();
     cca:	0e 94 1f 10 	call	0x203e	; 0x203e <Mode_led_Iint>
	buzzer_Iint();
     cce:	0e 94 34 10 	call	0x2068	; 0x2068 <buzzer_Iint>
	reset_button_INT0_Iint();
     cd2:	0e 94 49 10 	call	0x2092	; 0x2092 <reset_button_INT0_Iint>
	resume_button_INT2_Iint();
     cd6:	0e 94 73 10 	call	0x20e6	; 0x20e6 <resume_button_INT2_Iint>
	pause_button_INT1_Iint();
     cda:	0e 94 9d 10 	call	0x213a	; 0x213a <pause_button_INT1_Iint>
	Set_buttons_Iint();
     cde:	0e 94 c0 10 	call	0x2180	; 0x2180 <Set_buttons_Iint>

	while(1)
	{
		//Check for toggling mode
		if(!(PINB&(1<<PB7)))
     ce2:	e6 e3       	ldi	r30, 0x36	; 54
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	88 23       	and	r24, r24
     cea:	0c f4       	brge	.+2      	; 0xcee <main+0x4a>
     cec:	c6 c0       	rjmp	.+396    	; 0xe7a <main+0x1d6>
     cee:	fe 01       	movw	r30, r28
     cf0:	ed 54       	subi	r30, 0x4D	; 77
     cf2:	ff 4f       	sbci	r31, 0xFF	; 255
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	a0 e2       	ldi	r26, 0x20	; 32
     cfa:	b1 e4       	ldi	r27, 0x41	; 65
     cfc:	80 83       	st	Z, r24
     cfe:	91 83       	std	Z+1, r25	; 0x01
     d00:	a2 83       	std	Z+2, r26	; 0x02
     d02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d04:	8e 01       	movw	r16, r28
     d06:	01 55       	subi	r16, 0x51	; 81
     d08:	1f 4f       	sbci	r17, 0xFF	; 255
     d0a:	fe 01       	movw	r30, r28
     d0c:	ed 54       	subi	r30, 0x4D	; 77
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	60 81       	ld	r22, Z
     d12:	71 81       	ldd	r23, Z+1	; 0x01
     d14:	82 81       	ldd	r24, Z+2	; 0x02
     d16:	93 81       	ldd	r25, Z+3	; 0x03
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	4a e7       	ldi	r20, 0x7A	; 122
     d1e:	55 e4       	ldi	r21, 0x45	; 69
     d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	f8 01       	movw	r30, r16
     d2a:	80 83       	st	Z, r24
     d2c:	91 83       	std	Z+1, r25	; 0x01
     d2e:	a2 83       	std	Z+2, r26	; 0x02
     d30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d32:	fe 01       	movw	r30, r28
     d34:	e1 55       	subi	r30, 0x51	; 81
     d36:	ff 4f       	sbci	r31, 0xFF	; 255
     d38:	60 81       	ld	r22, Z
     d3a:	71 81       	ldd	r23, Z+1	; 0x01
     d3c:	82 81       	ldd	r24, Z+2	; 0x02
     d3e:	93 81       	ldd	r25, Z+3	; 0x03
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e8       	ldi	r20, 0x80	; 128
     d46:	5f e3       	ldi	r21, 0x3F	; 63
     d48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d4c:	88 23       	and	r24, r24
     d4e:	44 f4       	brge	.+16     	; 0xd60 <main+0xbc>
		__ticks = 1;
     d50:	fe 01       	movw	r30, r28
     d52:	e3 55       	subi	r30, 0x53	; 83
     d54:	ff 4f       	sbci	r31, 0xFF	; 255
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	91 83       	std	Z+1, r25	; 0x01
     d5c:	80 83       	st	Z, r24
     d5e:	64 c0       	rjmp	.+200    	; 0xe28 <main+0x184>
	else if (__tmp > 65535)
     d60:	fe 01       	movw	r30, r28
     d62:	e1 55       	subi	r30, 0x51	; 81
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	60 81       	ld	r22, Z
     d68:	71 81       	ldd	r23, Z+1	; 0x01
     d6a:	82 81       	ldd	r24, Z+2	; 0x02
     d6c:	93 81       	ldd	r25, Z+3	; 0x03
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	3f ef       	ldi	r19, 0xFF	; 255
     d72:	4f e7       	ldi	r20, 0x7F	; 127
     d74:	57 e4       	ldi	r21, 0x47	; 71
     d76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d7a:	18 16       	cp	r1, r24
     d7c:	0c f0       	brlt	.+2      	; 0xd80 <main+0xdc>
     d7e:	43 c0       	rjmp	.+134    	; 0xe06 <main+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d80:	fe 01       	movw	r30, r28
     d82:	ed 54       	subi	r30, 0x4D	; 77
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	60 81       	ld	r22, Z
     d88:	71 81       	ldd	r23, Z+1	; 0x01
     d8a:	82 81       	ldd	r24, Z+2	; 0x02
     d8c:	93 81       	ldd	r25, Z+3	; 0x03
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	40 e2       	ldi	r20, 0x20	; 32
     d94:	51 e4       	ldi	r21, 0x41	; 65
     d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	8e 01       	movw	r16, r28
     da0:	03 55       	subi	r16, 0x53	; 83
     da2:	1f 4f       	sbci	r17, 0xFF	; 255
     da4:	bc 01       	movw	r22, r24
     da6:	cd 01       	movw	r24, r26
     da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dac:	dc 01       	movw	r26, r24
     dae:	cb 01       	movw	r24, r22
     db0:	f8 01       	movw	r30, r16
     db2:	91 83       	std	Z+1, r25	; 0x01
     db4:	80 83       	st	Z, r24
     db6:	1f c0       	rjmp	.+62     	; 0xdf6 <main+0x152>
     db8:	fe 01       	movw	r30, r28
     dba:	e5 55       	subi	r30, 0x55	; 85
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	80 e9       	ldi	r24, 0x90	; 144
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dc6:	fe 01       	movw	r30, r28
     dc8:	e5 55       	subi	r30, 0x55	; 85
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	80 81       	ld	r24, Z
     dce:	91 81       	ldd	r25, Z+1	; 0x01
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	f1 f7       	brne	.-4      	; 0xdd0 <main+0x12c>
     dd4:	fe 01       	movw	r30, r28
     dd6:	e5 55       	subi	r30, 0x55	; 85
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dde:	de 01       	movw	r26, r28
     de0:	a3 55       	subi	r26, 0x53	; 83
     de2:	bf 4f       	sbci	r27, 0xFF	; 255
     de4:	fe 01       	movw	r30, r28
     de6:	e3 55       	subi	r30, 0x53	; 83
     de8:	ff 4f       	sbci	r31, 0xFF	; 255
     dea:	80 81       	ld	r24, Z
     dec:	91 81       	ldd	r25, Z+1	; 0x01
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	11 96       	adiw	r26, 0x01	; 1
     df2:	9c 93       	st	X, r25
     df4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df6:	fe 01       	movw	r30, r28
     df8:	e3 55       	subi	r30, 0x53	; 83
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	d1 f6       	brne	.-76     	; 0xdb8 <main+0x114>
     e04:	28 c0       	rjmp	.+80     	; 0xe56 <main+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e06:	8e 01       	movw	r16, r28
     e08:	03 55       	subi	r16, 0x53	; 83
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	fe 01       	movw	r30, r28
     e0e:	e1 55       	subi	r30, 0x51	; 81
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	60 81       	ld	r22, Z
     e14:	71 81       	ldd	r23, Z+1	; 0x01
     e16:	82 81       	ldd	r24, Z+2	; 0x02
     e18:	93 81       	ldd	r25, Z+3	; 0x03
     e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	f8 01       	movw	r30, r16
     e24:	91 83       	std	Z+1, r25	; 0x01
     e26:	80 83       	st	Z, r24
     e28:	de 01       	movw	r26, r28
     e2a:	a7 55       	subi	r26, 0x57	; 87
     e2c:	bf 4f       	sbci	r27, 0xFF	; 255
     e2e:	fe 01       	movw	r30, r28
     e30:	e3 55       	subi	r30, 0x53	; 83
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	80 81       	ld	r24, Z
     e36:	91 81       	ldd	r25, Z+1	; 0x01
     e38:	11 96       	adiw	r26, 0x01	; 1
     e3a:	9c 93       	st	X, r25
     e3c:	8e 93       	st	-X, r24
     e3e:	fe 01       	movw	r30, r28
     e40:	e7 55       	subi	r30, 0x57	; 87
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	80 81       	ld	r24, Z
     e46:	91 81       	ldd	r25, Z+1	; 0x01
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <main+0x1a4>
     e4c:	fe 01       	movw	r30, r28
     e4e:	e7 55       	subi	r30, 0x57	; 87
     e50:	ff 4f       	sbci	r31, 0xFF	; 255
     e52:	91 83       	std	Z+1, r25	; 0x01
     e54:	80 83       	st	Z, r24
		{
			_delay_ms(10);
			if(!(PINB&(1<<PB7))&&mode_button_flag)
     e56:	e6 e3       	ldi	r30, 0x36	; 54
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	88 23       	and	r24, r24
     e5e:	84 f0       	brlt	.+32     	; 0xe80 <main+0x1dc>
     e60:	80 91 69 00 	lds	r24, 0x0069
     e64:	88 23       	and	r24, r24
     e66:	61 f0       	breq	.+24     	; 0xe80 <main+0x1dc>
			{
				mode^=1;
     e68:	80 91 68 00 	lds	r24, 0x0068
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	89 27       	eor	r24, r25
     e70:	80 93 68 00 	sts	0x0068, r24
				mode_button_flag=0;
     e74:	10 92 69 00 	sts	0x0069, r1
     e78:	03 c0       	rjmp	.+6      	; 0xe80 <main+0x1dc>
			}
		}
		else
		{
			mode_button_flag=1;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	80 93 69 00 	sts	0x0069, r24
		}

		//check for mode
		if(mode)
     e80:	80 91 68 00 	lds	r24, 0x0068
     e84:	88 23       	and	r24, r24
     e86:	79 f0       	breq	.+30     	; 0xea6 <main+0x202>
		{
			PORTD |=(1<<PD4); //Turn on red led for count up
     e88:	a2 e3       	ldi	r26, 0x32	; 50
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e2 e3       	ldi	r30, 0x32	; 50
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 61       	ori	r24, 0x10	; 16
     e94:	8c 93       	st	X, r24
			PORTD &=~(1<<PD5);//Turn off yellow led for count down
     e96:	a2 e3       	ldi	r26, 0x32	; 50
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e2 e3       	ldi	r30, 0x32	; 50
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8f 7d       	andi	r24, 0xDF	; 223
     ea2:	8c 93       	st	X, r24
     ea4:	0e c0       	rjmp	.+28     	; 0xec2 <main+0x21e>
		}
		else
		{
			PORTD |=(1<<PD5); //Turn on yellow led for count down
     ea6:	a2 e3       	ldi	r26, 0x32	; 50
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e2 e3       	ldi	r30, 0x32	; 50
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	80 62       	ori	r24, 0x20	; 32
     eb2:	8c 93       	st	X, r24
			PORTD &=~(1<<PD4);//Turn off red led for count up
     eb4:	a2 e3       	ldi	r26, 0x32	; 50
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e2 e3       	ldi	r30, 0x32	; 50
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8f 7e       	andi	r24, 0xEF	; 239
     ec0:	8c 93       	st	X, r24
		}

		//Set needed time when pause the stop watch
		if(pause_flag)
     ec2:	80 91 72 00 	lds	r24, 0x0072
     ec6:	88 23       	and	r24, r24
     ec8:	09 f4       	brne	.+2      	; 0xecc <main+0x228>
     eca:	ed c4       	rjmp	.+2522   	; 0x18a6 <main+0xc02>
		{
			/*Use else if to reduce check time as
			 and use only one flag for all six buttons
			 and press one button in each time*/
			if(!(PINB&(1<<PB1)))
     ecc:	e6 e3       	ldi	r30, 0x36	; 54
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	82 70       	andi	r24, 0x02	; 2
     ed8:	90 70       	andi	r25, 0x00	; 0
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	09 f0       	breq	.+2      	; 0xee0 <main+0x23c>
     ede:	c8 c0       	rjmp	.+400    	; 0x1070 <main+0x3cc>
     ee0:	fe 01       	movw	r30, r28
     ee2:	eb 55       	subi	r30, 0x5B	; 91
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	a0 e2       	ldi	r26, 0x20	; 32
     eec:	b1 e4       	ldi	r27, 0x41	; 65
     eee:	80 83       	st	Z, r24
     ef0:	91 83       	std	Z+1, r25	; 0x01
     ef2:	a2 83       	std	Z+2, r26	; 0x02
     ef4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef6:	8e 01       	movw	r16, r28
     ef8:	0f 55       	subi	r16, 0x5F	; 95
     efa:	1f 4f       	sbci	r17, 0xFF	; 255
     efc:	fe 01       	movw	r30, r28
     efe:	eb 55       	subi	r30, 0x5B	; 91
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	60 81       	ld	r22, Z
     f04:	71 81       	ldd	r23, Z+1	; 0x01
     f06:	82 81       	ldd	r24, Z+2	; 0x02
     f08:	93 81       	ldd	r25, Z+3	; 0x03
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	4a e7       	ldi	r20, 0x7A	; 122
     f10:	55 e4       	ldi	r21, 0x45	; 69
     f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	f8 01       	movw	r30, r16
     f1c:	80 83       	st	Z, r24
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	a2 83       	std	Z+2, r26	; 0x02
     f22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f24:	fe 01       	movw	r30, r28
     f26:	ef 55       	subi	r30, 0x5F	; 95
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	60 81       	ld	r22, Z
     f2c:	71 81       	ldd	r23, Z+1	; 0x01
     f2e:	82 81       	ldd	r24, Z+2	; 0x02
     f30:	93 81       	ldd	r25, Z+3	; 0x03
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	40 e8       	ldi	r20, 0x80	; 128
     f38:	5f e3       	ldi	r21, 0x3F	; 63
     f3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f3e:	88 23       	and	r24, r24
     f40:	44 f4       	brge	.+16     	; 0xf52 <main+0x2ae>
		__ticks = 1;
     f42:	fe 01       	movw	r30, r28
     f44:	e1 56       	subi	r30, 0x61	; 97
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	91 83       	std	Z+1, r25	; 0x01
     f4e:	80 83       	st	Z, r24
     f50:	64 c0       	rjmp	.+200    	; 0x101a <main+0x376>
	else if (__tmp > 65535)
     f52:	fe 01       	movw	r30, r28
     f54:	ef 55       	subi	r30, 0x5F	; 95
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	60 81       	ld	r22, Z
     f5a:	71 81       	ldd	r23, Z+1	; 0x01
     f5c:	82 81       	ldd	r24, Z+2	; 0x02
     f5e:	93 81       	ldd	r25, Z+3	; 0x03
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	3f ef       	ldi	r19, 0xFF	; 255
     f64:	4f e7       	ldi	r20, 0x7F	; 127
     f66:	57 e4       	ldi	r21, 0x47	; 71
     f68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f6c:	18 16       	cp	r1, r24
     f6e:	0c f0       	brlt	.+2      	; 0xf72 <main+0x2ce>
     f70:	43 c0       	rjmp	.+134    	; 0xff8 <main+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f72:	fe 01       	movw	r30, r28
     f74:	eb 55       	subi	r30, 0x5B	; 91
     f76:	ff 4f       	sbci	r31, 0xFF	; 255
     f78:	60 81       	ld	r22, Z
     f7a:	71 81       	ldd	r23, Z+1	; 0x01
     f7c:	82 81       	ldd	r24, Z+2	; 0x02
     f7e:	93 81       	ldd	r25, Z+3	; 0x03
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	40 e2       	ldi	r20, 0x20	; 32
     f86:	51 e4       	ldi	r21, 0x41	; 65
     f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	8e 01       	movw	r16, r28
     f92:	01 56       	subi	r16, 0x61	; 97
     f94:	1f 4f       	sbci	r17, 0xFF	; 255
     f96:	bc 01       	movw	r22, r24
     f98:	cd 01       	movw	r24, r26
     f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	f8 01       	movw	r30, r16
     fa4:	91 83       	std	Z+1, r25	; 0x01
     fa6:	80 83       	st	Z, r24
     fa8:	1f c0       	rjmp	.+62     	; 0xfe8 <main+0x344>
     faa:	fe 01       	movw	r30, r28
     fac:	e3 56       	subi	r30, 0x63	; 99
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	80 e9       	ldi	r24, 0x90	; 144
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	91 83       	std	Z+1, r25	; 0x01
     fb6:	80 83       	st	Z, r24
     fb8:	fe 01       	movw	r30, r28
     fba:	e3 56       	subi	r30, 0x63	; 99
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	80 81       	ld	r24, Z
     fc0:	91 81       	ldd	r25, Z+1	; 0x01
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	f1 f7       	brne	.-4      	; 0xfc2 <main+0x31e>
     fc6:	fe 01       	movw	r30, r28
     fc8:	e3 56       	subi	r30, 0x63	; 99
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	91 83       	std	Z+1, r25	; 0x01
     fce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd0:	de 01       	movw	r26, r28
     fd2:	a1 56       	subi	r26, 0x61	; 97
     fd4:	bf 4f       	sbci	r27, 0xFF	; 255
     fd6:	fe 01       	movw	r30, r28
     fd8:	e1 56       	subi	r30, 0x61	; 97
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	80 81       	ld	r24, Z
     fde:	91 81       	ldd	r25, Z+1	; 0x01
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	11 96       	adiw	r26, 0x01	; 1
     fe4:	9c 93       	st	X, r25
     fe6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe8:	fe 01       	movw	r30, r28
     fea:	e1 56       	subi	r30, 0x61	; 97
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	80 81       	ld	r24, Z
     ff0:	91 81       	ldd	r25, Z+1	; 0x01
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	d1 f6       	brne	.-76     	; 0xfaa <main+0x306>
     ff6:	28 c0       	rjmp	.+80     	; 0x1048 <main+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff8:	8e 01       	movw	r16, r28
     ffa:	01 56       	subi	r16, 0x61	; 97
     ffc:	1f 4f       	sbci	r17, 0xFF	; 255
     ffe:	fe 01       	movw	r30, r28
    1000:	ef 55       	subi	r30, 0x5F	; 95
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	60 81       	ld	r22, Z
    1006:	71 81       	ldd	r23, Z+1	; 0x01
    1008:	82 81       	ldd	r24, Z+2	; 0x02
    100a:	93 81       	ldd	r25, Z+3	; 0x03
    100c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	f8 01       	movw	r30, r16
    1016:	91 83       	std	Z+1, r25	; 0x01
    1018:	80 83       	st	Z, r24
    101a:	de 01       	movw	r26, r28
    101c:	a5 56       	subi	r26, 0x65	; 101
    101e:	bf 4f       	sbci	r27, 0xFF	; 255
    1020:	fe 01       	movw	r30, r28
    1022:	e1 56       	subi	r30, 0x61	; 97
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	80 81       	ld	r24, Z
    1028:	91 81       	ldd	r25, Z+1	; 0x01
    102a:	11 96       	adiw	r26, 0x01	; 1
    102c:	9c 93       	st	X, r25
    102e:	8e 93       	st	-X, r24
    1030:	fe 01       	movw	r30, r28
    1032:	e5 56       	subi	r30, 0x65	; 101
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	80 81       	ld	r24, Z
    1038:	91 81       	ldd	r25, Z+1	; 0x01
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <main+0x396>
    103e:	fe 01       	movw	r30, r28
    1040:	e5 56       	subi	r30, 0x65	; 101
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	91 83       	std	Z+1, r25	; 0x01
    1046:	80 83       	st	Z, r24
			{
				_delay_ms(10);
				if(!(PINB&(1<<PB1))&&set_buttons_flag)
    1048:	e6 e3       	ldi	r30, 0x36	; 54
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	88 2f       	mov	r24, r24
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	82 70       	andi	r24, 0x02	; 2
    1054:	90 70       	andi	r25, 0x00	; 0
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	09 f0       	breq	.+2      	; 0x105c <main+0x3b8>
    105a:	25 c4       	rjmp	.+2122   	; 0x18a6 <main+0xc02>
    105c:	80 91 6a 00 	lds	r24, 0x006A
    1060:	88 23       	and	r24, r24
    1062:	09 f4       	brne	.+2      	; 0x1066 <main+0x3c2>
    1064:	20 c4       	rjmp	.+2112   	; 0x18a6 <main+0xc02>
				{
					hour_increment();
    1066:	0e 94 d5 10 	call	0x21aa	; 0x21aa <hour_increment>
					set_buttons_flag=0;
    106a:	10 92 6a 00 	sts	0x006A, r1
    106e:	1b c4       	rjmp	.+2102   	; 0x18a6 <main+0xc02>
				}
			}
			else if(!(PINB&(1<<PB0)))
    1070:	e6 e3       	ldi	r30, 0x36	; 54
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	81 70       	andi	r24, 0x01	; 1
    107c:	90 70       	andi	r25, 0x00	; 0
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	09 f0       	breq	.+2      	; 0x1084 <main+0x3e0>
    1082:	c8 c0       	rjmp	.+400    	; 0x1214 <main+0x570>
    1084:	fe 01       	movw	r30, r28
    1086:	e9 56       	subi	r30, 0x69	; 105
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	a0 e2       	ldi	r26, 0x20	; 32
    1090:	b1 e4       	ldi	r27, 0x41	; 65
    1092:	80 83       	st	Z, r24
    1094:	91 83       	std	Z+1, r25	; 0x01
    1096:	a2 83       	std	Z+2, r26	; 0x02
    1098:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    109a:	8e 01       	movw	r16, r28
    109c:	0d 56       	subi	r16, 0x6D	; 109
    109e:	1f 4f       	sbci	r17, 0xFF	; 255
    10a0:	fe 01       	movw	r30, r28
    10a2:	e9 56       	subi	r30, 0x69	; 105
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	60 81       	ld	r22, Z
    10a8:	71 81       	ldd	r23, Z+1	; 0x01
    10aa:	82 81       	ldd	r24, Z+2	; 0x02
    10ac:	93 81       	ldd	r25, Z+3	; 0x03
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	4a e7       	ldi	r20, 0x7A	; 122
    10b4:	55 e4       	ldi	r21, 0x45	; 69
    10b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	f8 01       	movw	r30, r16
    10c0:	80 83       	st	Z, r24
    10c2:	91 83       	std	Z+1, r25	; 0x01
    10c4:	a2 83       	std	Z+2, r26	; 0x02
    10c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10c8:	fe 01       	movw	r30, r28
    10ca:	ed 56       	subi	r30, 0x6D	; 109
    10cc:	ff 4f       	sbci	r31, 0xFF	; 255
    10ce:	60 81       	ld	r22, Z
    10d0:	71 81       	ldd	r23, Z+1	; 0x01
    10d2:	82 81       	ldd	r24, Z+2	; 0x02
    10d4:	93 81       	ldd	r25, Z+3	; 0x03
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 e8       	ldi	r20, 0x80	; 128
    10dc:	5f e3       	ldi	r21, 0x3F	; 63
    10de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10e2:	88 23       	and	r24, r24
    10e4:	44 f4       	brge	.+16     	; 0x10f6 <main+0x452>
		__ticks = 1;
    10e6:	fe 01       	movw	r30, r28
    10e8:	ef 56       	subi	r30, 0x6F	; 111
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	91 83       	std	Z+1, r25	; 0x01
    10f2:	80 83       	st	Z, r24
    10f4:	64 c0       	rjmp	.+200    	; 0x11be <main+0x51a>
	else if (__tmp > 65535)
    10f6:	fe 01       	movw	r30, r28
    10f8:	ed 56       	subi	r30, 0x6D	; 109
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	60 81       	ld	r22, Z
    10fe:	71 81       	ldd	r23, Z+1	; 0x01
    1100:	82 81       	ldd	r24, Z+2	; 0x02
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	3f ef       	ldi	r19, 0xFF	; 255
    1108:	4f e7       	ldi	r20, 0x7F	; 127
    110a:	57 e4       	ldi	r21, 0x47	; 71
    110c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1110:	18 16       	cp	r1, r24
    1112:	0c f0       	brlt	.+2      	; 0x1116 <main+0x472>
    1114:	43 c0       	rjmp	.+134    	; 0x119c <main+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1116:	fe 01       	movw	r30, r28
    1118:	e9 56       	subi	r30, 0x69	; 105
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	60 81       	ld	r22, Z
    111e:	71 81       	ldd	r23, Z+1	; 0x01
    1120:	82 81       	ldd	r24, Z+2	; 0x02
    1122:	93 81       	ldd	r25, Z+3	; 0x03
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	40 e2       	ldi	r20, 0x20	; 32
    112a:	51 e4       	ldi	r21, 0x41	; 65
    112c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	8e 01       	movw	r16, r28
    1136:	0f 56       	subi	r16, 0x6F	; 111
    1138:	1f 4f       	sbci	r17, 0xFF	; 255
    113a:	bc 01       	movw	r22, r24
    113c:	cd 01       	movw	r24, r26
    113e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	f8 01       	movw	r30, r16
    1148:	91 83       	std	Z+1, r25	; 0x01
    114a:	80 83       	st	Z, r24
    114c:	1f c0       	rjmp	.+62     	; 0x118c <main+0x4e8>
    114e:	fe 01       	movw	r30, r28
    1150:	e1 57       	subi	r30, 0x71	; 113
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	80 e9       	ldi	r24, 0x90	; 144
    1156:	91 e0       	ldi	r25, 0x01	; 1
    1158:	91 83       	std	Z+1, r25	; 0x01
    115a:	80 83       	st	Z, r24
    115c:	fe 01       	movw	r30, r28
    115e:	e1 57       	subi	r30, 0x71	; 113
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	80 81       	ld	r24, Z
    1164:	91 81       	ldd	r25, Z+1	; 0x01
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <main+0x4c2>
    116a:	fe 01       	movw	r30, r28
    116c:	e1 57       	subi	r30, 0x71	; 113
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	91 83       	std	Z+1, r25	; 0x01
    1172:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1174:	de 01       	movw	r26, r28
    1176:	af 56       	subi	r26, 0x6F	; 111
    1178:	bf 4f       	sbci	r27, 0xFF	; 255
    117a:	fe 01       	movw	r30, r28
    117c:	ef 56       	subi	r30, 0x6F	; 111
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	80 81       	ld	r24, Z
    1182:	91 81       	ldd	r25, Z+1	; 0x01
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	11 96       	adiw	r26, 0x01	; 1
    1188:	9c 93       	st	X, r25
    118a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118c:	fe 01       	movw	r30, r28
    118e:	ef 56       	subi	r30, 0x6F	; 111
    1190:	ff 4f       	sbci	r31, 0xFF	; 255
    1192:	80 81       	ld	r24, Z
    1194:	91 81       	ldd	r25, Z+1	; 0x01
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	d1 f6       	brne	.-76     	; 0x114e <main+0x4aa>
    119a:	28 c0       	rjmp	.+80     	; 0x11ec <main+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119c:	8e 01       	movw	r16, r28
    119e:	0f 56       	subi	r16, 0x6F	; 111
    11a0:	1f 4f       	sbci	r17, 0xFF	; 255
    11a2:	fe 01       	movw	r30, r28
    11a4:	ed 56       	subi	r30, 0x6D	; 109
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	60 81       	ld	r22, Z
    11aa:	71 81       	ldd	r23, Z+1	; 0x01
    11ac:	82 81       	ldd	r24, Z+2	; 0x02
    11ae:	93 81       	ldd	r25, Z+3	; 0x03
    11b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	f8 01       	movw	r30, r16
    11ba:	91 83       	std	Z+1, r25	; 0x01
    11bc:	80 83       	st	Z, r24
    11be:	de 01       	movw	r26, r28
    11c0:	a3 57       	subi	r26, 0x73	; 115
    11c2:	bf 4f       	sbci	r27, 0xFF	; 255
    11c4:	fe 01       	movw	r30, r28
    11c6:	ef 56       	subi	r30, 0x6F	; 111
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	80 81       	ld	r24, Z
    11cc:	91 81       	ldd	r25, Z+1	; 0x01
    11ce:	11 96       	adiw	r26, 0x01	; 1
    11d0:	9c 93       	st	X, r25
    11d2:	8e 93       	st	-X, r24
    11d4:	fe 01       	movw	r30, r28
    11d6:	e3 57       	subi	r30, 0x73	; 115
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	80 81       	ld	r24, Z
    11dc:	91 81       	ldd	r25, Z+1	; 0x01
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	f1 f7       	brne	.-4      	; 0x11de <main+0x53a>
    11e2:	fe 01       	movw	r30, r28
    11e4:	e3 57       	subi	r30, 0x73	; 115
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	91 83       	std	Z+1, r25	; 0x01
    11ea:	80 83       	st	Z, r24
			{
				_delay_ms(10);
				if(!(PINB&(1<<PB0))&&set_buttons_flag)
    11ec:	e6 e3       	ldi	r30, 0x36	; 54
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	88 2f       	mov	r24, r24
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	81 70       	andi	r24, 0x01	; 1
    11f8:	90 70       	andi	r25, 0x00	; 0
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	09 f0       	breq	.+2      	; 0x1200 <main+0x55c>
    11fe:	53 c3       	rjmp	.+1702   	; 0x18a6 <main+0xc02>
    1200:	80 91 6a 00 	lds	r24, 0x006A
    1204:	88 23       	and	r24, r24
    1206:	09 f4       	brne	.+2      	; 0x120a <main+0x566>
    1208:	4e c3       	rjmp	.+1692   	; 0x18a6 <main+0xc02>
				{
					hour_decrement();
    120a:	0e 94 4f 11 	call	0x229e	; 0x229e <hour_decrement>
					set_buttons_flag=0;
    120e:	10 92 6a 00 	sts	0x006A, r1
    1212:	49 c3       	rjmp	.+1682   	; 0x18a6 <main+0xc02>
				}
			}
			else if(!(PINB&(1<<PB4)))
    1214:	e6 e3       	ldi	r30, 0x36	; 54
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	80 71       	andi	r24, 0x10	; 16
    1220:	90 70       	andi	r25, 0x00	; 0
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	09 f0       	breq	.+2      	; 0x1228 <main+0x584>
    1226:	c8 c0       	rjmp	.+400    	; 0x13b8 <main+0x714>
    1228:	fe 01       	movw	r30, r28
    122a:	e7 57       	subi	r30, 0x77	; 119
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	a0 e2       	ldi	r26, 0x20	; 32
    1234:	b1 e4       	ldi	r27, 0x41	; 65
    1236:	80 83       	st	Z, r24
    1238:	91 83       	std	Z+1, r25	; 0x01
    123a:	a2 83       	std	Z+2, r26	; 0x02
    123c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    123e:	8e 01       	movw	r16, r28
    1240:	0b 57       	subi	r16, 0x7B	; 123
    1242:	1f 4f       	sbci	r17, 0xFF	; 255
    1244:	fe 01       	movw	r30, r28
    1246:	e7 57       	subi	r30, 0x77	; 119
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	60 81       	ld	r22, Z
    124c:	71 81       	ldd	r23, Z+1	; 0x01
    124e:	82 81       	ldd	r24, Z+2	; 0x02
    1250:	93 81       	ldd	r25, Z+3	; 0x03
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	4a e7       	ldi	r20, 0x7A	; 122
    1258:	55 e4       	ldi	r21, 0x45	; 69
    125a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	f8 01       	movw	r30, r16
    1264:	80 83       	st	Z, r24
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	a2 83       	std	Z+2, r26	; 0x02
    126a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    126c:	fe 01       	movw	r30, r28
    126e:	eb 57       	subi	r30, 0x7B	; 123
    1270:	ff 4f       	sbci	r31, 0xFF	; 255
    1272:	60 81       	ld	r22, Z
    1274:	71 81       	ldd	r23, Z+1	; 0x01
    1276:	82 81       	ldd	r24, Z+2	; 0x02
    1278:	93 81       	ldd	r25, Z+3	; 0x03
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e8       	ldi	r20, 0x80	; 128
    1280:	5f e3       	ldi	r21, 0x3F	; 63
    1282:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1286:	88 23       	and	r24, r24
    1288:	44 f4       	brge	.+16     	; 0x129a <main+0x5f6>
		__ticks = 1;
    128a:	fe 01       	movw	r30, r28
    128c:	ed 57       	subi	r30, 0x7D	; 125
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	91 83       	std	Z+1, r25	; 0x01
    1296:	80 83       	st	Z, r24
    1298:	64 c0       	rjmp	.+200    	; 0x1362 <main+0x6be>
	else if (__tmp > 65535)
    129a:	fe 01       	movw	r30, r28
    129c:	eb 57       	subi	r30, 0x7B	; 123
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	60 81       	ld	r22, Z
    12a2:	71 81       	ldd	r23, Z+1	; 0x01
    12a4:	82 81       	ldd	r24, Z+2	; 0x02
    12a6:	93 81       	ldd	r25, Z+3	; 0x03
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	3f ef       	ldi	r19, 0xFF	; 255
    12ac:	4f e7       	ldi	r20, 0x7F	; 127
    12ae:	57 e4       	ldi	r21, 0x47	; 71
    12b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b4:	18 16       	cp	r1, r24
    12b6:	0c f0       	brlt	.+2      	; 0x12ba <main+0x616>
    12b8:	43 c0       	rjmp	.+134    	; 0x1340 <main+0x69c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ba:	fe 01       	movw	r30, r28
    12bc:	e7 57       	subi	r30, 0x77	; 119
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	60 81       	ld	r22, Z
    12c2:	71 81       	ldd	r23, Z+1	; 0x01
    12c4:	82 81       	ldd	r24, Z+2	; 0x02
    12c6:	93 81       	ldd	r25, Z+3	; 0x03
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e2       	ldi	r20, 0x20	; 32
    12ce:	51 e4       	ldi	r21, 0x41	; 65
    12d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	8e 01       	movw	r16, r28
    12da:	0d 57       	subi	r16, 0x7D	; 125
    12dc:	1f 4f       	sbci	r17, 0xFF	; 255
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	f8 01       	movw	r30, r16
    12ec:	91 83       	std	Z+1, r25	; 0x01
    12ee:	80 83       	st	Z, r24
    12f0:	1f c0       	rjmp	.+62     	; 0x1330 <main+0x68c>
    12f2:	fe 01       	movw	r30, r28
    12f4:	ef 57       	subi	r30, 0x7F	; 127
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	80 e9       	ldi	r24, 0x90	; 144
    12fa:	91 e0       	ldi	r25, 0x01	; 1
    12fc:	91 83       	std	Z+1, r25	; 0x01
    12fe:	80 83       	st	Z, r24
    1300:	fe 01       	movw	r30, r28
    1302:	ef 57       	subi	r30, 0x7F	; 127
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	80 81       	ld	r24, Z
    1308:	91 81       	ldd	r25, Z+1	; 0x01
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <main+0x666>
    130e:	fe 01       	movw	r30, r28
    1310:	ef 57       	subi	r30, 0x7F	; 127
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	91 83       	std	Z+1, r25	; 0x01
    1316:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1318:	de 01       	movw	r26, r28
    131a:	ad 57       	subi	r26, 0x7D	; 125
    131c:	bf 4f       	sbci	r27, 0xFF	; 255
    131e:	fe 01       	movw	r30, r28
    1320:	ed 57       	subi	r30, 0x7D	; 125
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	80 81       	ld	r24, Z
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	11 96       	adiw	r26, 0x01	; 1
    132c:	9c 93       	st	X, r25
    132e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1330:	fe 01       	movw	r30, r28
    1332:	ed 57       	subi	r30, 0x7D	; 125
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	d1 f6       	brne	.-76     	; 0x12f2 <main+0x64e>
    133e:	28 c0       	rjmp	.+80     	; 0x1390 <main+0x6ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1340:	8e 01       	movw	r16, r28
    1342:	0d 57       	subi	r16, 0x7D	; 125
    1344:	1f 4f       	sbci	r17, 0xFF	; 255
    1346:	fe 01       	movw	r30, r28
    1348:	eb 57       	subi	r30, 0x7B	; 123
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	60 81       	ld	r22, Z
    134e:	71 81       	ldd	r23, Z+1	; 0x01
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	93 81       	ldd	r25, Z+3	; 0x03
    1354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	f8 01       	movw	r30, r16
    135e:	91 83       	std	Z+1, r25	; 0x01
    1360:	80 83       	st	Z, r24
    1362:	de 01       	movw	r26, r28
    1364:	a1 58       	subi	r26, 0x81	; 129
    1366:	bf 4f       	sbci	r27, 0xFF	; 255
    1368:	fe 01       	movw	r30, r28
    136a:	ed 57       	subi	r30, 0x7D	; 125
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	11 96       	adiw	r26, 0x01	; 1
    1374:	9c 93       	st	X, r25
    1376:	8e 93       	st	-X, r24
    1378:	fe 01       	movw	r30, r28
    137a:	e1 58       	subi	r30, 0x81	; 129
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	80 81       	ld	r24, Z
    1380:	91 81       	ldd	r25, Z+1	; 0x01
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	f1 f7       	brne	.-4      	; 0x1382 <main+0x6de>
    1386:	fe 01       	movw	r30, r28
    1388:	e1 58       	subi	r30, 0x81	; 129
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	80 83       	st	Z, r24
			{
				_delay_ms(10);
				if(!(PINB&(1<<PB4))&&set_buttons_flag)
    1390:	e6 e3       	ldi	r30, 0x36	; 54
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	80 71       	andi	r24, 0x10	; 16
    139c:	90 70       	andi	r25, 0x00	; 0
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	09 f0       	breq	.+2      	; 0x13a4 <main+0x700>
    13a2:	81 c2       	rjmp	.+1282   	; 0x18a6 <main+0xc02>
    13a4:	80 91 6a 00 	lds	r24, 0x006A
    13a8:	88 23       	and	r24, r24
    13aa:	09 f4       	brne	.+2      	; 0x13ae <main+0x70a>
    13ac:	7c c2       	rjmp	.+1272   	; 0x18a6 <main+0xc02>
				{
					min_increment();
    13ae:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <min_increment>
					set_buttons_flag=0;
    13b2:	10 92 6a 00 	sts	0x006A, r1
    13b6:	77 c2       	rjmp	.+1262   	; 0x18a6 <main+0xc02>
				}
			}
			else if(!(PINB&(1<<PB3)))
    13b8:	e6 e3       	ldi	r30, 0x36	; 54
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	88 2f       	mov	r24, r24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	88 70       	andi	r24, 0x08	; 8
    13c4:	90 70       	andi	r25, 0x00	; 0
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	09 f0       	breq	.+2      	; 0x13cc <main+0x728>
    13ca:	c8 c0       	rjmp	.+400    	; 0x155c <main+0x8b8>
    13cc:	fe 01       	movw	r30, r28
    13ce:	e5 58       	subi	r30, 0x85	; 133
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	a0 e2       	ldi	r26, 0x20	; 32
    13d8:	b1 e4       	ldi	r27, 0x41	; 65
    13da:	80 83       	st	Z, r24
    13dc:	91 83       	std	Z+1, r25	; 0x01
    13de:	a2 83       	std	Z+2, r26	; 0x02
    13e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e2:	8e 01       	movw	r16, r28
    13e4:	09 58       	subi	r16, 0x89	; 137
    13e6:	1f 4f       	sbci	r17, 0xFF	; 255
    13e8:	fe 01       	movw	r30, r28
    13ea:	e5 58       	subi	r30, 0x85	; 133
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	60 81       	ld	r22, Z
    13f0:	71 81       	ldd	r23, Z+1	; 0x01
    13f2:	82 81       	ldd	r24, Z+2	; 0x02
    13f4:	93 81       	ldd	r25, Z+3	; 0x03
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	4a e7       	ldi	r20, 0x7A	; 122
    13fc:	55 e4       	ldi	r21, 0x45	; 69
    13fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	f8 01       	movw	r30, r16
    1408:	80 83       	st	Z, r24
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	a2 83       	std	Z+2, r26	; 0x02
    140e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1410:	fe 01       	movw	r30, r28
    1412:	e9 58       	subi	r30, 0x89	; 137
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	60 81       	ld	r22, Z
    1418:	71 81       	ldd	r23, Z+1	; 0x01
    141a:	82 81       	ldd	r24, Z+2	; 0x02
    141c:	93 81       	ldd	r25, Z+3	; 0x03
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e8       	ldi	r20, 0x80	; 128
    1424:	5f e3       	ldi	r21, 0x3F	; 63
    1426:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    142a:	88 23       	and	r24, r24
    142c:	44 f4       	brge	.+16     	; 0x143e <main+0x79a>
		__ticks = 1;
    142e:	fe 01       	movw	r30, r28
    1430:	eb 58       	subi	r30, 0x8B	; 139
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	91 83       	std	Z+1, r25	; 0x01
    143a:	80 83       	st	Z, r24
    143c:	64 c0       	rjmp	.+200    	; 0x1506 <main+0x862>
	else if (__tmp > 65535)
    143e:	fe 01       	movw	r30, r28
    1440:	e9 58       	subi	r30, 0x89	; 137
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	60 81       	ld	r22, Z
    1446:	71 81       	ldd	r23, Z+1	; 0x01
    1448:	82 81       	ldd	r24, Z+2	; 0x02
    144a:	93 81       	ldd	r25, Z+3	; 0x03
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	3f ef       	ldi	r19, 0xFF	; 255
    1450:	4f e7       	ldi	r20, 0x7F	; 127
    1452:	57 e4       	ldi	r21, 0x47	; 71
    1454:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1458:	18 16       	cp	r1, r24
    145a:	0c f0       	brlt	.+2      	; 0x145e <main+0x7ba>
    145c:	43 c0       	rjmp	.+134    	; 0x14e4 <main+0x840>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145e:	fe 01       	movw	r30, r28
    1460:	e5 58       	subi	r30, 0x85	; 133
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	60 81       	ld	r22, Z
    1466:	71 81       	ldd	r23, Z+1	; 0x01
    1468:	82 81       	ldd	r24, Z+2	; 0x02
    146a:	93 81       	ldd	r25, Z+3	; 0x03
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e2       	ldi	r20, 0x20	; 32
    1472:	51 e4       	ldi	r21, 0x41	; 65
    1474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	8e 01       	movw	r16, r28
    147e:	0b 58       	subi	r16, 0x8B	; 139
    1480:	1f 4f       	sbci	r17, 0xFF	; 255
    1482:	bc 01       	movw	r22, r24
    1484:	cd 01       	movw	r24, r26
    1486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	f8 01       	movw	r30, r16
    1490:	91 83       	std	Z+1, r25	; 0x01
    1492:	80 83       	st	Z, r24
    1494:	1f c0       	rjmp	.+62     	; 0x14d4 <main+0x830>
    1496:	fe 01       	movw	r30, r28
    1498:	ed 58       	subi	r30, 0x8D	; 141
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	80 e9       	ldi	r24, 0x90	; 144
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	91 83       	std	Z+1, r25	; 0x01
    14a2:	80 83       	st	Z, r24
    14a4:	fe 01       	movw	r30, r28
    14a6:	ed 58       	subi	r30, 0x8D	; 141
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	80 81       	ld	r24, Z
    14ac:	91 81       	ldd	r25, Z+1	; 0x01
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <main+0x80a>
    14b2:	fe 01       	movw	r30, r28
    14b4:	ed 58       	subi	r30, 0x8D	; 141
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	91 83       	std	Z+1, r25	; 0x01
    14ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14bc:	de 01       	movw	r26, r28
    14be:	ab 58       	subi	r26, 0x8B	; 139
    14c0:	bf 4f       	sbci	r27, 0xFF	; 255
    14c2:	fe 01       	movw	r30, r28
    14c4:	eb 58       	subi	r30, 0x8B	; 139
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	80 81       	ld	r24, Z
    14ca:	91 81       	ldd	r25, Z+1	; 0x01
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	11 96       	adiw	r26, 0x01	; 1
    14d0:	9c 93       	st	X, r25
    14d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d4:	fe 01       	movw	r30, r28
    14d6:	eb 58       	subi	r30, 0x8B	; 139
    14d8:	ff 4f       	sbci	r31, 0xFF	; 255
    14da:	80 81       	ld	r24, Z
    14dc:	91 81       	ldd	r25, Z+1	; 0x01
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	d1 f6       	brne	.-76     	; 0x1496 <main+0x7f2>
    14e2:	28 c0       	rjmp	.+80     	; 0x1534 <main+0x890>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e4:	8e 01       	movw	r16, r28
    14e6:	0b 58       	subi	r16, 0x8B	; 139
    14e8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ea:	fe 01       	movw	r30, r28
    14ec:	e9 58       	subi	r30, 0x89	; 137
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	60 81       	ld	r22, Z
    14f2:	71 81       	ldd	r23, Z+1	; 0x01
    14f4:	82 81       	ldd	r24, Z+2	; 0x02
    14f6:	93 81       	ldd	r25, Z+3	; 0x03
    14f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	f8 01       	movw	r30, r16
    1502:	91 83       	std	Z+1, r25	; 0x01
    1504:	80 83       	st	Z, r24
    1506:	de 01       	movw	r26, r28
    1508:	af 58       	subi	r26, 0x8F	; 143
    150a:	bf 4f       	sbci	r27, 0xFF	; 255
    150c:	fe 01       	movw	r30, r28
    150e:	eb 58       	subi	r30, 0x8B	; 139
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	80 81       	ld	r24, Z
    1514:	91 81       	ldd	r25, Z+1	; 0x01
    1516:	11 96       	adiw	r26, 0x01	; 1
    1518:	9c 93       	st	X, r25
    151a:	8e 93       	st	-X, r24
    151c:	fe 01       	movw	r30, r28
    151e:	ef 58       	subi	r30, 0x8F	; 143
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	80 81       	ld	r24, Z
    1524:	91 81       	ldd	r25, Z+1	; 0x01
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	f1 f7       	brne	.-4      	; 0x1526 <main+0x882>
    152a:	fe 01       	movw	r30, r28
    152c:	ef 58       	subi	r30, 0x8F	; 143
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	91 83       	std	Z+1, r25	; 0x01
    1532:	80 83       	st	Z, r24
			{
				_delay_ms(10);
				if(!(PINB&(1<<PB3))&&set_buttons_flag)
    1534:	e6 e3       	ldi	r30, 0x36	; 54
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	88 70       	andi	r24, 0x08	; 8
    1540:	90 70       	andi	r25, 0x00	; 0
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	09 f0       	breq	.+2      	; 0x1548 <main+0x8a4>
    1546:	af c1       	rjmp	.+862    	; 0x18a6 <main+0xc02>
    1548:	80 91 6a 00 	lds	r24, 0x006A
    154c:	88 23       	and	r24, r24
    154e:	09 f4       	brne	.+2      	; 0x1552 <main+0x8ae>
    1550:	aa c1       	rjmp	.+852    	; 0x18a6 <main+0xc02>
				{
					min_decrement();
    1552:	0e 94 70 11 	call	0x22e0	; 0x22e0 <min_decrement>
					set_buttons_flag=0;
    1556:	10 92 6a 00 	sts	0x006A, r1
    155a:	a5 c1       	rjmp	.+842    	; 0x18a6 <main+0xc02>
				}
			}
			else if(!(PINB&(1<<PB6)))
    155c:	e6 e3       	ldi	r30, 0x36	; 54
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	80 74       	andi	r24, 0x40	; 64
    1568:	90 70       	andi	r25, 0x00	; 0
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	09 f0       	breq	.+2      	; 0x1570 <main+0x8cc>
    156e:	c8 c0       	rjmp	.+400    	; 0x1700 <main+0xa5c>
    1570:	fe 01       	movw	r30, r28
    1572:	e3 59       	subi	r30, 0x93	; 147
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	a0 e2       	ldi	r26, 0x20	; 32
    157c:	b1 e4       	ldi	r27, 0x41	; 65
    157e:	80 83       	st	Z, r24
    1580:	91 83       	std	Z+1, r25	; 0x01
    1582:	a2 83       	std	Z+2, r26	; 0x02
    1584:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1586:	8e 01       	movw	r16, r28
    1588:	07 59       	subi	r16, 0x97	; 151
    158a:	1f 4f       	sbci	r17, 0xFF	; 255
    158c:	fe 01       	movw	r30, r28
    158e:	e3 59       	subi	r30, 0x93	; 147
    1590:	ff 4f       	sbci	r31, 0xFF	; 255
    1592:	60 81       	ld	r22, Z
    1594:	71 81       	ldd	r23, Z+1	; 0x01
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	93 81       	ldd	r25, Z+3	; 0x03
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	4a e7       	ldi	r20, 0x7A	; 122
    15a0:	55 e4       	ldi	r21, 0x45	; 69
    15a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	f8 01       	movw	r30, r16
    15ac:	80 83       	st	Z, r24
    15ae:	91 83       	std	Z+1, r25	; 0x01
    15b0:	a2 83       	std	Z+2, r26	; 0x02
    15b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15b4:	fe 01       	movw	r30, r28
    15b6:	e7 59       	subi	r30, 0x97	; 151
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	60 81       	ld	r22, Z
    15bc:	71 81       	ldd	r23, Z+1	; 0x01
    15be:	82 81       	ldd	r24, Z+2	; 0x02
    15c0:	93 81       	ldd	r25, Z+3	; 0x03
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	40 e8       	ldi	r20, 0x80	; 128
    15c8:	5f e3       	ldi	r21, 0x3F	; 63
    15ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ce:	88 23       	and	r24, r24
    15d0:	44 f4       	brge	.+16     	; 0x15e2 <main+0x93e>
		__ticks = 1;
    15d2:	fe 01       	movw	r30, r28
    15d4:	e9 59       	subi	r30, 0x99	; 153
    15d6:	ff 4f       	sbci	r31, 0xFF	; 255
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	91 83       	std	Z+1, r25	; 0x01
    15de:	80 83       	st	Z, r24
    15e0:	64 c0       	rjmp	.+200    	; 0x16aa <main+0xa06>
	else if (__tmp > 65535)
    15e2:	fe 01       	movw	r30, r28
    15e4:	e7 59       	subi	r30, 0x97	; 151
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	60 81       	ld	r22, Z
    15ea:	71 81       	ldd	r23, Z+1	; 0x01
    15ec:	82 81       	ldd	r24, Z+2	; 0x02
    15ee:	93 81       	ldd	r25, Z+3	; 0x03
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	3f ef       	ldi	r19, 0xFF	; 255
    15f4:	4f e7       	ldi	r20, 0x7F	; 127
    15f6:	57 e4       	ldi	r21, 0x47	; 71
    15f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15fc:	18 16       	cp	r1, r24
    15fe:	0c f0       	brlt	.+2      	; 0x1602 <main+0x95e>
    1600:	43 c0       	rjmp	.+134    	; 0x1688 <main+0x9e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1602:	fe 01       	movw	r30, r28
    1604:	e3 59       	subi	r30, 0x93	; 147
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	60 81       	ld	r22, Z
    160a:	71 81       	ldd	r23, Z+1	; 0x01
    160c:	82 81       	ldd	r24, Z+2	; 0x02
    160e:	93 81       	ldd	r25, Z+3	; 0x03
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e2       	ldi	r20, 0x20	; 32
    1616:	51 e4       	ldi	r21, 0x41	; 65
    1618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	8e 01       	movw	r16, r28
    1622:	09 59       	subi	r16, 0x99	; 153
    1624:	1f 4f       	sbci	r17, 0xFF	; 255
    1626:	bc 01       	movw	r22, r24
    1628:	cd 01       	movw	r24, r26
    162a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	f8 01       	movw	r30, r16
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	80 83       	st	Z, r24
    1638:	1f c0       	rjmp	.+62     	; 0x1678 <main+0x9d4>
    163a:	fe 01       	movw	r30, r28
    163c:	eb 59       	subi	r30, 0x9B	; 155
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	80 e9       	ldi	r24, 0x90	; 144
    1642:	91 e0       	ldi	r25, 0x01	; 1
    1644:	91 83       	std	Z+1, r25	; 0x01
    1646:	80 83       	st	Z, r24
    1648:	fe 01       	movw	r30, r28
    164a:	eb 59       	subi	r30, 0x9B	; 155
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	80 81       	ld	r24, Z
    1650:	91 81       	ldd	r25, Z+1	; 0x01
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <main+0x9ae>
    1656:	fe 01       	movw	r30, r28
    1658:	eb 59       	subi	r30, 0x9B	; 155
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	91 83       	std	Z+1, r25	; 0x01
    165e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1660:	de 01       	movw	r26, r28
    1662:	a9 59       	subi	r26, 0x99	; 153
    1664:	bf 4f       	sbci	r27, 0xFF	; 255
    1666:	fe 01       	movw	r30, r28
    1668:	e9 59       	subi	r30, 0x99	; 153
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	80 81       	ld	r24, Z
    166e:	91 81       	ldd	r25, Z+1	; 0x01
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	11 96       	adiw	r26, 0x01	; 1
    1674:	9c 93       	st	X, r25
    1676:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1678:	fe 01       	movw	r30, r28
    167a:	e9 59       	subi	r30, 0x99	; 153
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	d1 f6       	brne	.-76     	; 0x163a <main+0x996>
    1686:	28 c0       	rjmp	.+80     	; 0x16d8 <main+0xa34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1688:	8e 01       	movw	r16, r28
    168a:	09 59       	subi	r16, 0x99	; 153
    168c:	1f 4f       	sbci	r17, 0xFF	; 255
    168e:	fe 01       	movw	r30, r28
    1690:	e7 59       	subi	r30, 0x97	; 151
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	60 81       	ld	r22, Z
    1696:	71 81       	ldd	r23, Z+1	; 0x01
    1698:	82 81       	ldd	r24, Z+2	; 0x02
    169a:	93 81       	ldd	r25, Z+3	; 0x03
    169c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	f8 01       	movw	r30, r16
    16a6:	91 83       	std	Z+1, r25	; 0x01
    16a8:	80 83       	st	Z, r24
    16aa:	de 01       	movw	r26, r28
    16ac:	ad 59       	subi	r26, 0x9D	; 157
    16ae:	bf 4f       	sbci	r27, 0xFF	; 255
    16b0:	fe 01       	movw	r30, r28
    16b2:	e9 59       	subi	r30, 0x99	; 153
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	80 81       	ld	r24, Z
    16b8:	91 81       	ldd	r25, Z+1	; 0x01
    16ba:	11 96       	adiw	r26, 0x01	; 1
    16bc:	9c 93       	st	X, r25
    16be:	8e 93       	st	-X, r24
    16c0:	fe 01       	movw	r30, r28
    16c2:	ed 59       	subi	r30, 0x9D	; 157
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	80 81       	ld	r24, Z
    16c8:	91 81       	ldd	r25, Z+1	; 0x01
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <main+0xa26>
    16ce:	fe 01       	movw	r30, r28
    16d0:	ed 59       	subi	r30, 0x9D	; 157
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	91 83       	std	Z+1, r25	; 0x01
    16d6:	80 83       	st	Z, r24
			{
				_delay_ms(10);
				if(!(PINB&(1<<PB6))&&set_buttons_flag)
    16d8:	e6 e3       	ldi	r30, 0x36	; 54
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	80 74       	andi	r24, 0x40	; 64
    16e4:	90 70       	andi	r25, 0x00	; 0
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	09 f0       	breq	.+2      	; 0x16ec <main+0xa48>
    16ea:	dd c0       	rjmp	.+442    	; 0x18a6 <main+0xc02>
    16ec:	80 91 6a 00 	lds	r24, 0x006A
    16f0:	88 23       	and	r24, r24
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <main+0xa52>
    16f4:	d8 c0       	rjmp	.+432    	; 0x18a6 <main+0xc02>
				{
					sec_increment();
    16f6:	0e 94 21 11 	call	0x2242	; 0x2242 <sec_increment>
					set_buttons_flag=0;
    16fa:	10 92 6a 00 	sts	0x006A, r1
    16fe:	d3 c0       	rjmp	.+422    	; 0x18a6 <main+0xc02>
				}
			}
			else if(!(PINB&(1<<PB5)))
    1700:	e6 e3       	ldi	r30, 0x36	; 54
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	80 72       	andi	r24, 0x20	; 32
    170c:	90 70       	andi	r25, 0x00	; 0
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	09 f0       	breq	.+2      	; 0x1714 <main+0xa70>
    1712:	c6 c0       	rjmp	.+396    	; 0x18a0 <main+0xbfc>
    1714:	fe 01       	movw	r30, r28
    1716:	e1 5a       	subi	r30, 0xA1	; 161
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	a0 e2       	ldi	r26, 0x20	; 32
    1720:	b1 e4       	ldi	r27, 0x41	; 65
    1722:	80 83       	st	Z, r24
    1724:	91 83       	std	Z+1, r25	; 0x01
    1726:	a2 83       	std	Z+2, r26	; 0x02
    1728:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172a:	8e 01       	movw	r16, r28
    172c:	05 5a       	subi	r16, 0xA5	; 165
    172e:	1f 4f       	sbci	r17, 0xFF	; 255
    1730:	fe 01       	movw	r30, r28
    1732:	e1 5a       	subi	r30, 0xA1	; 161
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	60 81       	ld	r22, Z
    1738:	71 81       	ldd	r23, Z+1	; 0x01
    173a:	82 81       	ldd	r24, Z+2	; 0x02
    173c:	93 81       	ldd	r25, Z+3	; 0x03
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	4a e7       	ldi	r20, 0x7A	; 122
    1744:	55 e4       	ldi	r21, 0x45	; 69
    1746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	f8 01       	movw	r30, r16
    1750:	80 83       	st	Z, r24
    1752:	91 83       	std	Z+1, r25	; 0x01
    1754:	a2 83       	std	Z+2, r26	; 0x02
    1756:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1758:	fe 01       	movw	r30, r28
    175a:	e5 5a       	subi	r30, 0xA5	; 165
    175c:	ff 4f       	sbci	r31, 0xFF	; 255
    175e:	60 81       	ld	r22, Z
    1760:	71 81       	ldd	r23, Z+1	; 0x01
    1762:	82 81       	ldd	r24, Z+2	; 0x02
    1764:	93 81       	ldd	r25, Z+3	; 0x03
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	40 e8       	ldi	r20, 0x80	; 128
    176c:	5f e3       	ldi	r21, 0x3F	; 63
    176e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1772:	88 23       	and	r24, r24
    1774:	44 f4       	brge	.+16     	; 0x1786 <main+0xae2>
		__ticks = 1;
    1776:	fe 01       	movw	r30, r28
    1778:	e7 5a       	subi	r30, 0xA7	; 167
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	91 83       	std	Z+1, r25	; 0x01
    1782:	80 83       	st	Z, r24
    1784:	64 c0       	rjmp	.+200    	; 0x184e <main+0xbaa>
	else if (__tmp > 65535)
    1786:	fe 01       	movw	r30, r28
    1788:	e5 5a       	subi	r30, 0xA5	; 165
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	60 81       	ld	r22, Z
    178e:	71 81       	ldd	r23, Z+1	; 0x01
    1790:	82 81       	ldd	r24, Z+2	; 0x02
    1792:	93 81       	ldd	r25, Z+3	; 0x03
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	3f ef       	ldi	r19, 0xFF	; 255
    1798:	4f e7       	ldi	r20, 0x7F	; 127
    179a:	57 e4       	ldi	r21, 0x47	; 71
    179c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a0:	18 16       	cp	r1, r24
    17a2:	0c f0       	brlt	.+2      	; 0x17a6 <main+0xb02>
    17a4:	43 c0       	rjmp	.+134    	; 0x182c <main+0xb88>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a6:	fe 01       	movw	r30, r28
    17a8:	e1 5a       	subi	r30, 0xA1	; 161
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	60 81       	ld	r22, Z
    17ae:	71 81       	ldd	r23, Z+1	; 0x01
    17b0:	82 81       	ldd	r24, Z+2	; 0x02
    17b2:	93 81       	ldd	r25, Z+3	; 0x03
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e2       	ldi	r20, 0x20	; 32
    17ba:	51 e4       	ldi	r21, 0x41	; 65
    17bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	8e 01       	movw	r16, r28
    17c6:	07 5a       	subi	r16, 0xA7	; 167
    17c8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ca:	bc 01       	movw	r22, r24
    17cc:	cd 01       	movw	r24, r26
    17ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	f8 01       	movw	r30, r16
    17d8:	91 83       	std	Z+1, r25	; 0x01
    17da:	80 83       	st	Z, r24
    17dc:	1f c0       	rjmp	.+62     	; 0x181c <main+0xb78>
    17de:	fe 01       	movw	r30, r28
    17e0:	e9 5a       	subi	r30, 0xA9	; 169
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	80 e9       	ldi	r24, 0x90	; 144
    17e6:	91 e0       	ldi	r25, 0x01	; 1
    17e8:	91 83       	std	Z+1, r25	; 0x01
    17ea:	80 83       	st	Z, r24
    17ec:	fe 01       	movw	r30, r28
    17ee:	e9 5a       	subi	r30, 0xA9	; 169
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	80 81       	ld	r24, Z
    17f4:	91 81       	ldd	r25, Z+1	; 0x01
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	f1 f7       	brne	.-4      	; 0x17f6 <main+0xb52>
    17fa:	fe 01       	movw	r30, r28
    17fc:	e9 5a       	subi	r30, 0xA9	; 169
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	91 83       	std	Z+1, r25	; 0x01
    1802:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1804:	de 01       	movw	r26, r28
    1806:	a7 5a       	subi	r26, 0xA7	; 167
    1808:	bf 4f       	sbci	r27, 0xFF	; 255
    180a:	fe 01       	movw	r30, r28
    180c:	e7 5a       	subi	r30, 0xA7	; 167
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	11 96       	adiw	r26, 0x01	; 1
    1818:	9c 93       	st	X, r25
    181a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181c:	fe 01       	movw	r30, r28
    181e:	e7 5a       	subi	r30, 0xA7	; 167
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	80 81       	ld	r24, Z
    1824:	91 81       	ldd	r25, Z+1	; 0x01
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	d1 f6       	brne	.-76     	; 0x17de <main+0xb3a>
    182a:	28 c0       	rjmp	.+80     	; 0x187c <main+0xbd8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182c:	8e 01       	movw	r16, r28
    182e:	07 5a       	subi	r16, 0xA7	; 167
    1830:	1f 4f       	sbci	r17, 0xFF	; 255
    1832:	fe 01       	movw	r30, r28
    1834:	e5 5a       	subi	r30, 0xA5	; 165
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	60 81       	ld	r22, Z
    183a:	71 81       	ldd	r23, Z+1	; 0x01
    183c:	82 81       	ldd	r24, Z+2	; 0x02
    183e:	93 81       	ldd	r25, Z+3	; 0x03
    1840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	f8 01       	movw	r30, r16
    184a:	91 83       	std	Z+1, r25	; 0x01
    184c:	80 83       	st	Z, r24
    184e:	de 01       	movw	r26, r28
    1850:	ab 5a       	subi	r26, 0xAB	; 171
    1852:	bf 4f       	sbci	r27, 0xFF	; 255
    1854:	fe 01       	movw	r30, r28
    1856:	e7 5a       	subi	r30, 0xA7	; 167
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	80 81       	ld	r24, Z
    185c:	91 81       	ldd	r25, Z+1	; 0x01
    185e:	11 96       	adiw	r26, 0x01	; 1
    1860:	9c 93       	st	X, r25
    1862:	8e 93       	st	-X, r24
    1864:	fe 01       	movw	r30, r28
    1866:	eb 5a       	subi	r30, 0xAB	; 171
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	80 81       	ld	r24, Z
    186c:	91 81       	ldd	r25, Z+1	; 0x01
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <main+0xbca>
    1872:	fe 01       	movw	r30, r28
    1874:	eb 5a       	subi	r30, 0xAB	; 171
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	80 83       	st	Z, r24
			{
				_delay_ms(10);
				if(!(PINB&(1<<PB5))&&set_buttons_flag)
    187c:	e6 e3       	ldi	r30, 0x36	; 54
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	88 2f       	mov	r24, r24
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	80 72       	andi	r24, 0x20	; 32
    1888:	90 70       	andi	r25, 0x00	; 0
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	61 f4       	brne	.+24     	; 0x18a6 <main+0xc02>
    188e:	80 91 6a 00 	lds	r24, 0x006A
    1892:	88 23       	and	r24, r24
    1894:	41 f0       	breq	.+16     	; 0x18a6 <main+0xc02>
				{
					sec_decrement();
    1896:	0e 94 9a 11 	call	0x2334	; 0x2334 <sec_decrement>
					set_buttons_flag=0;
    189a:	10 92 6a 00 	sts	0x006A, r1
    189e:	03 c0       	rjmp	.+6      	; 0x18a6 <main+0xc02>
				}
			}
			else
			{
				set_buttons_flag=1;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	80 93 6a 00 	sts	0x006A, r24
			}
		}

		//Loop on 7 segments
		PORTA = (PORTA&0xC0) | (1<<5);
    18a6:	ab e3       	ldi	r26, 0x3B	; 59
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	eb e3       	ldi	r30, 0x3B	; 59
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	80 7c       	andi	r24, 0xC0	; 192
    18b2:	80 62       	ori	r24, 0x20	; 32
    18b4:	8c 93       	st	X, r24
		PORTC = (PORTC&0xF0) | (sec1&0x0F);
    18b6:	a5 e3       	ldi	r26, 0x35	; 53
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e5 e3       	ldi	r30, 0x35	; 53
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	98 2f       	mov	r25, r24
    18c2:	90 7f       	andi	r25, 0xF0	; 240
    18c4:	80 91 6c 00 	lds	r24, 0x006C
    18c8:	8f 70       	andi	r24, 0x0F	; 15
    18ca:	89 2b       	or	r24, r25
    18cc:	8c 93       	st	X, r24
    18ce:	fe 01       	movw	r30, r28
    18d0:	ef 5a       	subi	r30, 0xAF	; 175
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	a0 e0       	ldi	r26, 0x00	; 0
    18da:	b0 e4       	ldi	r27, 0x40	; 64
    18dc:	80 83       	st	Z, r24
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	a2 83       	std	Z+2, r26	; 0x02
    18e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e4:	8e 01       	movw	r16, r28
    18e6:	03 5b       	subi	r16, 0xB3	; 179
    18e8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ea:	fe 01       	movw	r30, r28
    18ec:	ef 5a       	subi	r30, 0xAF	; 175
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	60 81       	ld	r22, Z
    18f2:	71 81       	ldd	r23, Z+1	; 0x01
    18f4:	82 81       	ldd	r24, Z+2	; 0x02
    18f6:	93 81       	ldd	r25, Z+3	; 0x03
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	4a e7       	ldi	r20, 0x7A	; 122
    18fe:	55 e4       	ldi	r21, 0x45	; 69
    1900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	f8 01       	movw	r30, r16
    190a:	80 83       	st	Z, r24
    190c:	91 83       	std	Z+1, r25	; 0x01
    190e:	a2 83       	std	Z+2, r26	; 0x02
    1910:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1912:	fe 01       	movw	r30, r28
    1914:	e3 5b       	subi	r30, 0xB3	; 179
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	60 81       	ld	r22, Z
    191a:	71 81       	ldd	r23, Z+1	; 0x01
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	93 81       	ldd	r25, Z+3	; 0x03
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e8       	ldi	r20, 0x80	; 128
    1926:	5f e3       	ldi	r21, 0x3F	; 63
    1928:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    192c:	88 23       	and	r24, r24
    192e:	44 f4       	brge	.+16     	; 0x1940 <main+0xc9c>
		__ticks = 1;
    1930:	fe 01       	movw	r30, r28
    1932:	e5 5b       	subi	r30, 0xB5	; 181
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	91 83       	std	Z+1, r25	; 0x01
    193c:	80 83       	st	Z, r24
    193e:	64 c0       	rjmp	.+200    	; 0x1a08 <main+0xd64>
	else if (__tmp > 65535)
    1940:	fe 01       	movw	r30, r28
    1942:	e3 5b       	subi	r30, 0xB3	; 179
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	60 81       	ld	r22, Z
    1948:	71 81       	ldd	r23, Z+1	; 0x01
    194a:	82 81       	ldd	r24, Z+2	; 0x02
    194c:	93 81       	ldd	r25, Z+3	; 0x03
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	3f ef       	ldi	r19, 0xFF	; 255
    1952:	4f e7       	ldi	r20, 0x7F	; 127
    1954:	57 e4       	ldi	r21, 0x47	; 71
    1956:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195a:	18 16       	cp	r1, r24
    195c:	0c f0       	brlt	.+2      	; 0x1960 <main+0xcbc>
    195e:	43 c0       	rjmp	.+134    	; 0x19e6 <main+0xd42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1960:	fe 01       	movw	r30, r28
    1962:	ef 5a       	subi	r30, 0xAF	; 175
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	60 81       	ld	r22, Z
    1968:	71 81       	ldd	r23, Z+1	; 0x01
    196a:	82 81       	ldd	r24, Z+2	; 0x02
    196c:	93 81       	ldd	r25, Z+3	; 0x03
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e2       	ldi	r20, 0x20	; 32
    1974:	51 e4       	ldi	r21, 0x41	; 65
    1976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	8e 01       	movw	r16, r28
    1980:	05 5b       	subi	r16, 0xB5	; 181
    1982:	1f 4f       	sbci	r17, 0xFF	; 255
    1984:	bc 01       	movw	r22, r24
    1986:	cd 01       	movw	r24, r26
    1988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	f8 01       	movw	r30, r16
    1992:	91 83       	std	Z+1, r25	; 0x01
    1994:	80 83       	st	Z, r24
    1996:	1f c0       	rjmp	.+62     	; 0x19d6 <main+0xd32>
    1998:	fe 01       	movw	r30, r28
    199a:	e7 5b       	subi	r30, 0xB7	; 183
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	80 e9       	ldi	r24, 0x90	; 144
    19a0:	91 e0       	ldi	r25, 0x01	; 1
    19a2:	91 83       	std	Z+1, r25	; 0x01
    19a4:	80 83       	st	Z, r24
    19a6:	fe 01       	movw	r30, r28
    19a8:	e7 5b       	subi	r30, 0xB7	; 183
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	80 81       	ld	r24, Z
    19ae:	91 81       	ldd	r25, Z+1	; 0x01
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	f1 f7       	brne	.-4      	; 0x19b0 <main+0xd0c>
    19b4:	fe 01       	movw	r30, r28
    19b6:	e7 5b       	subi	r30, 0xB7	; 183
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19be:	de 01       	movw	r26, r28
    19c0:	a5 5b       	subi	r26, 0xB5	; 181
    19c2:	bf 4f       	sbci	r27, 0xFF	; 255
    19c4:	fe 01       	movw	r30, r28
    19c6:	e5 5b       	subi	r30, 0xB5	; 181
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	80 81       	ld	r24, Z
    19cc:	91 81       	ldd	r25, Z+1	; 0x01
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	11 96       	adiw	r26, 0x01	; 1
    19d2:	9c 93       	st	X, r25
    19d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d6:	fe 01       	movw	r30, r28
    19d8:	e5 5b       	subi	r30, 0xB5	; 181
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	80 81       	ld	r24, Z
    19de:	91 81       	ldd	r25, Z+1	; 0x01
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	d1 f6       	brne	.-76     	; 0x1998 <main+0xcf4>
    19e4:	27 c0       	rjmp	.+78     	; 0x1a34 <main+0xd90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e6:	8e 01       	movw	r16, r28
    19e8:	05 5b       	subi	r16, 0xB5	; 181
    19ea:	1f 4f       	sbci	r17, 0xFF	; 255
    19ec:	fe 01       	movw	r30, r28
    19ee:	e3 5b       	subi	r30, 0xB3	; 179
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	60 81       	ld	r22, Z
    19f4:	71 81       	ldd	r23, Z+1	; 0x01
    19f6:	82 81       	ldd	r24, Z+2	; 0x02
    19f8:	93 81       	ldd	r25, Z+3	; 0x03
    19fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	f8 01       	movw	r30, r16
    1a04:	91 83       	std	Z+1, r25	; 0x01
    1a06:	80 83       	st	Z, r24
    1a08:	de 01       	movw	r26, r28
    1a0a:	a9 5b       	subi	r26, 0xB9	; 185
    1a0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a0e:	fe 01       	movw	r30, r28
    1a10:	e5 5b       	subi	r30, 0xB5	; 181
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	80 81       	ld	r24, Z
    1a16:	91 81       	ldd	r25, Z+1	; 0x01
    1a18:	8d 93       	st	X+, r24
    1a1a:	9c 93       	st	X, r25
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e9 5b       	subi	r30, 0xB9	; 185
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	80 81       	ld	r24, Z
    1a24:	91 81       	ldd	r25, Z+1	; 0x01
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <main+0xd82>
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e9 5b       	subi	r30, 0xB9	; 185
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	91 83       	std	Z+1, r25	; 0x01
    1a32:	80 83       	st	Z, r24
		_delay_ms(2);

		PORTA = (PORTA&0xC0) | (1<<4);
    1a34:	ab e3       	ldi	r26, 0x3B	; 59
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	eb e3       	ldi	r30, 0x3B	; 59
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	80 7c       	andi	r24, 0xC0	; 192
    1a40:	80 61       	ori	r24, 0x10	; 16
    1a42:	8c 93       	st	X, r24
		PORTC = (PORTC&0xF0) | (sec2&0x0F);
    1a44:	a5 e3       	ldi	r26, 0x35	; 53
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e5 e3       	ldi	r30, 0x35	; 53
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	98 2f       	mov	r25, r24
    1a50:	90 7f       	andi	r25, 0xF0	; 240
    1a52:	80 91 6d 00 	lds	r24, 0x006D
    1a56:	8f 70       	andi	r24, 0x0F	; 15
    1a58:	89 2b       	or	r24, r25
    1a5a:	8c 93       	st	X, r24
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	ed 5b       	subi	r30, 0xBD	; 189
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	a0 e0       	ldi	r26, 0x00	; 0
    1a68:	b0 e4       	ldi	r27, 0x40	; 64
    1a6a:	80 83       	st	Z, r24
    1a6c:	91 83       	std	Z+1, r25	; 0x01
    1a6e:	a2 83       	std	Z+2, r26	; 0x02
    1a70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a72:	8e 01       	movw	r16, r28
    1a74:	01 5c       	subi	r16, 0xC1	; 193
    1a76:	1f 4f       	sbci	r17, 0xFF	; 255
    1a78:	fe 01       	movw	r30, r28
    1a7a:	ed 5b       	subi	r30, 0xBD	; 189
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	60 81       	ld	r22, Z
    1a80:	71 81       	ldd	r23, Z+1	; 0x01
    1a82:	82 81       	ldd	r24, Z+2	; 0x02
    1a84:	93 81       	ldd	r25, Z+3	; 0x03
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	4a e7       	ldi	r20, 0x7A	; 122
    1a8c:	55 e4       	ldi	r21, 0x45	; 69
    1a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	f8 01       	movw	r30, r16
    1a98:	80 83       	st	Z, r24
    1a9a:	91 83       	std	Z+1, r25	; 0x01
    1a9c:	a2 83       	std	Z+2, r26	; 0x02
    1a9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	ff 96       	adiw	r30, 0x3f	; 63
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e8       	ldi	r20, 0x80	; 128
    1ab2:	5f e3       	ldi	r21, 0x3F	; 63
    1ab4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab8:	88 23       	and	r24, r24
    1aba:	2c f4       	brge	.+10     	; 0x1ac6 <main+0xe22>
		__ticks = 1;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	9e af       	std	Y+62, r25	; 0x3e
    1ac2:	8d af       	std	Y+61, r24	; 0x3d
    1ac4:	46 c0       	rjmp	.+140    	; 0x1b52 <main+0xeae>
	else if (__tmp > 65535)
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	ff 96       	adiw	r30, 0x3f	; 63
    1aca:	60 81       	ld	r22, Z
    1acc:	71 81       	ldd	r23, Z+1	; 0x01
    1ace:	82 81       	ldd	r24, Z+2	; 0x02
    1ad0:	93 81       	ldd	r25, Z+3	; 0x03
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	3f ef       	ldi	r19, 0xFF	; 255
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	57 e4       	ldi	r21, 0x47	; 71
    1ada:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	64 f5       	brge	.+88     	; 0x1b3a <main+0xe96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	ed 5b       	subi	r30, 0xBD	; 189
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	60 81       	ld	r22, Z
    1aea:	71 81       	ldd	r23, Z+1	; 0x01
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e2       	ldi	r20, 0x20	; 32
    1af6:	51 e4       	ldi	r21, 0x41	; 65
    1af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	9e af       	std	Y+62, r25	; 0x3e
    1b0e:	8d af       	std	Y+61, r24	; 0x3d
    1b10:	0f c0       	rjmp	.+30     	; 0x1b30 <main+0xe8c>
    1b12:	80 e9       	ldi	r24, 0x90	; 144
    1b14:	91 e0       	ldi	r25, 0x01	; 1
    1b16:	9c af       	std	Y+60, r25	; 0x3c
    1b18:	8b af       	std	Y+59, r24	; 0x3b
    1b1a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b1c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	f1 f7       	brne	.-4      	; 0x1b1e <main+0xe7a>
    1b22:	9c af       	std	Y+60, r25	; 0x3c
    1b24:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b26:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b28:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	9e af       	std	Y+62, r25	; 0x3e
    1b2e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b30:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b32:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	69 f7       	brne	.-38     	; 0x1b12 <main+0xe6e>
    1b38:	16 c0       	rjmp	.+44     	; 0x1b66 <main+0xec2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	ff 96       	adiw	r30, 0x3f	; 63
    1b3e:	60 81       	ld	r22, Z
    1b40:	71 81       	ldd	r23, Z+1	; 0x01
    1b42:	82 81       	ldd	r24, Z+2	; 0x02
    1b44:	93 81       	ldd	r25, Z+3	; 0x03
    1b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	9e af       	std	Y+62, r25	; 0x3e
    1b50:	8d af       	std	Y+61, r24	; 0x3d
    1b52:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b54:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b56:	9a af       	std	Y+58, r25	; 0x3a
    1b58:	89 af       	std	Y+57, r24	; 0x39
    1b5a:	89 ad       	ldd	r24, Y+57	; 0x39
    1b5c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	f1 f7       	brne	.-4      	; 0x1b5e <main+0xeba>
    1b62:	9a af       	std	Y+58, r25	; 0x3a
    1b64:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(2);

		PORTA = (PORTA&0xC0) | (1<<3);
    1b66:	ab e3       	ldi	r26, 0x3B	; 59
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	eb e3       	ldi	r30, 0x3B	; 59
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	80 7c       	andi	r24, 0xC0	; 192
    1b72:	88 60       	ori	r24, 0x08	; 8
    1b74:	8c 93       	st	X, r24
		PORTC = (PORTC&0xF0) | (min1&0x0F);
    1b76:	a5 e3       	ldi	r26, 0x35	; 53
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e5 e3       	ldi	r30, 0x35	; 53
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	98 2f       	mov	r25, r24
    1b82:	90 7f       	andi	r25, 0xF0	; 240
    1b84:	80 91 6e 00 	lds	r24, 0x006E
    1b88:	8f 70       	andi	r24, 0x0F	; 15
    1b8a:	89 2b       	or	r24, r25
    1b8c:	8c 93       	st	X, r24
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	a0 e0       	ldi	r26, 0x00	; 0
    1b94:	b0 e4       	ldi	r27, 0x40	; 64
    1b96:	8d ab       	std	Y+53, r24	; 0x35
    1b98:	9e ab       	std	Y+54, r25	; 0x36
    1b9a:	af ab       	std	Y+55, r26	; 0x37
    1b9c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9e:	6d a9       	ldd	r22, Y+53	; 0x35
    1ba0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ba2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ba4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	4a e7       	ldi	r20, 0x7A	; 122
    1bac:	55 e4       	ldi	r21, 0x45	; 69
    1bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	89 ab       	std	Y+49, r24	; 0x31
    1bb8:	9a ab       	std	Y+50, r25	; 0x32
    1bba:	ab ab       	std	Y+51, r26	; 0x33
    1bbc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bbe:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc0:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc2:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc4:	9c a9       	ldd	r25, Y+52	; 0x34
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e8       	ldi	r20, 0x80	; 128
    1bcc:	5f e3       	ldi	r21, 0x3F	; 63
    1bce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bd2:	88 23       	and	r24, r24
    1bd4:	2c f4       	brge	.+10     	; 0x1be0 <main+0xf3c>
		__ticks = 1;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	98 ab       	std	Y+48, r25	; 0x30
    1bdc:	8f a7       	std	Y+47, r24	; 0x2f
    1bde:	3f c0       	rjmp	.+126    	; 0x1c5e <main+0xfba>
	else if (__tmp > 65535)
    1be0:	69 a9       	ldd	r22, Y+49	; 0x31
    1be2:	7a a9       	ldd	r23, Y+50	; 0x32
    1be4:	8b a9       	ldd	r24, Y+51	; 0x33
    1be6:	9c a9       	ldd	r25, Y+52	; 0x34
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	3f ef       	ldi	r19, 0xFF	; 255
    1bec:	4f e7       	ldi	r20, 0x7F	; 127
    1bee:	57 e4       	ldi	r21, 0x47	; 71
    1bf0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bf4:	18 16       	cp	r1, r24
    1bf6:	4c f5       	brge	.+82     	; 0x1c4a <main+0xfa6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf8:	6d a9       	ldd	r22, Y+53	; 0x35
    1bfa:	7e a9       	ldd	r23, Y+54	; 0x36
    1bfc:	8f a9       	ldd	r24, Y+55	; 0x37
    1bfe:	98 ad       	ldd	r25, Y+56	; 0x38
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e2       	ldi	r20, 0x20	; 32
    1c06:	51 e4       	ldi	r21, 0x41	; 65
    1c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	bc 01       	movw	r22, r24
    1c12:	cd 01       	movw	r24, r26
    1c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	98 ab       	std	Y+48, r25	; 0x30
    1c1e:	8f a7       	std	Y+47, r24	; 0x2f
    1c20:	0f c0       	rjmp	.+30     	; 0x1c40 <main+0xf9c>
    1c22:	80 e9       	ldi	r24, 0x90	; 144
    1c24:	91 e0       	ldi	r25, 0x01	; 1
    1c26:	9e a7       	std	Y+46, r25	; 0x2e
    1c28:	8d a7       	std	Y+45, r24	; 0x2d
    1c2a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c2c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <main+0xf8a>
    1c32:	9e a7       	std	Y+46, r25	; 0x2e
    1c34:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c38:	98 a9       	ldd	r25, Y+48	; 0x30
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	98 ab       	std	Y+48, r25	; 0x30
    1c3e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c42:	98 a9       	ldd	r25, Y+48	; 0x30
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	69 f7       	brne	.-38     	; 0x1c22 <main+0xf7e>
    1c48:	14 c0       	rjmp	.+40     	; 0x1c72 <main+0xfce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c50:	9c a9       	ldd	r25, Y+52	; 0x34
    1c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	98 ab       	std	Y+48, r25	; 0x30
    1c5c:	8f a7       	std	Y+47, r24	; 0x2f
    1c5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c60:	98 a9       	ldd	r25, Y+48	; 0x30
    1c62:	9c a7       	std	Y+44, r25	; 0x2c
    1c64:	8b a7       	std	Y+43, r24	; 0x2b
    1c66:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c68:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <main+0xfc6>
    1c6e:	9c a7       	std	Y+44, r25	; 0x2c
    1c70:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);

		PORTA = (PORTA&0xC0) | (1<<2);
    1c72:	ab e3       	ldi	r26, 0x3B	; 59
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	eb e3       	ldi	r30, 0x3B	; 59
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 7c       	andi	r24, 0xC0	; 192
    1c7e:	84 60       	ori	r24, 0x04	; 4
    1c80:	8c 93       	st	X, r24
		PORTC = (PORTC&0xF0) | (min2&0x0F);
    1c82:	a5 e3       	ldi	r26, 0x35	; 53
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e5 e3       	ldi	r30, 0x35	; 53
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	98 2f       	mov	r25, r24
    1c8e:	90 7f       	andi	r25, 0xF0	; 240
    1c90:	80 91 6f 00 	lds	r24, 0x006F
    1c94:	8f 70       	andi	r24, 0x0F	; 15
    1c96:	89 2b       	or	r24, r25
    1c98:	8c 93       	st	X, r24
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	a0 e0       	ldi	r26, 0x00	; 0
    1ca0:	b0 e4       	ldi	r27, 0x40	; 64
    1ca2:	8f a3       	std	Y+39, r24	; 0x27
    1ca4:	98 a7       	std	Y+40, r25	; 0x28
    1ca6:	a9 a7       	std	Y+41, r26	; 0x29
    1ca8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1caa:	6f a1       	ldd	r22, Y+39	; 0x27
    1cac:	78 a5       	ldd	r23, Y+40	; 0x28
    1cae:	89 a5       	ldd	r24, Y+41	; 0x29
    1cb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	4a e7       	ldi	r20, 0x7A	; 122
    1cb8:	55 e4       	ldi	r21, 0x45	; 69
    1cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	8b a3       	std	Y+35, r24	; 0x23
    1cc4:	9c a3       	std	Y+36, r25	; 0x24
    1cc6:	ad a3       	std	Y+37, r26	; 0x25
    1cc8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cca:	6b a1       	ldd	r22, Y+35	; 0x23
    1ccc:	7c a1       	ldd	r23, Y+36	; 0x24
    1cce:	8d a1       	ldd	r24, Y+37	; 0x25
    1cd0:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e8       	ldi	r20, 0x80	; 128
    1cd8:	5f e3       	ldi	r21, 0x3F	; 63
    1cda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cde:	88 23       	and	r24, r24
    1ce0:	2c f4       	brge	.+10     	; 0x1cec <main+0x1048>
		__ticks = 1;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	9a a3       	std	Y+34, r25	; 0x22
    1ce8:	89 a3       	std	Y+33, r24	; 0x21
    1cea:	3f c0       	rjmp	.+126    	; 0x1d6a <main+0x10c6>
	else if (__tmp > 65535)
    1cec:	6b a1       	ldd	r22, Y+35	; 0x23
    1cee:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf0:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf2:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	3f ef       	ldi	r19, 0xFF	; 255
    1cf8:	4f e7       	ldi	r20, 0x7F	; 127
    1cfa:	57 e4       	ldi	r21, 0x47	; 71
    1cfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d00:	18 16       	cp	r1, r24
    1d02:	4c f5       	brge	.+82     	; 0x1d56 <main+0x10b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d04:	6f a1       	ldd	r22, Y+39	; 0x27
    1d06:	78 a5       	ldd	r23, Y+40	; 0x28
    1d08:	89 a5       	ldd	r24, Y+41	; 0x29
    1d0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e2       	ldi	r20, 0x20	; 32
    1d12:	51 e4       	ldi	r21, 0x41	; 65
    1d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	bc 01       	movw	r22, r24
    1d1e:	cd 01       	movw	r24, r26
    1d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	9a a3       	std	Y+34, r25	; 0x22
    1d2a:	89 a3       	std	Y+33, r24	; 0x21
    1d2c:	0f c0       	rjmp	.+30     	; 0x1d4c <main+0x10a8>
    1d2e:	80 e9       	ldi	r24, 0x90	; 144
    1d30:	91 e0       	ldi	r25, 0x01	; 1
    1d32:	98 a3       	std	Y+32, r25	; 0x20
    1d34:	8f 8f       	std	Y+31, r24	; 0x1f
    1d36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d38:	98 a1       	ldd	r25, Y+32	; 0x20
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <main+0x1096>
    1d3e:	98 a3       	std	Y+32, r25	; 0x20
    1d40:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d42:	89 a1       	ldd	r24, Y+33	; 0x21
    1d44:	9a a1       	ldd	r25, Y+34	; 0x22
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	9a a3       	std	Y+34, r25	; 0x22
    1d4a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	69 f7       	brne	.-38     	; 0x1d2e <main+0x108a>
    1d54:	14 c0       	rjmp	.+40     	; 0x1d7e <main+0x10da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d56:	6b a1       	ldd	r22, Y+35	; 0x23
    1d58:	7c a1       	ldd	r23, Y+36	; 0x24
    1d5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	9a a3       	std	Y+34, r25	; 0x22
    1d68:	89 a3       	std	Y+33, r24	; 0x21
    1d6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d6e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d70:	8d 8f       	std	Y+29, r24	; 0x1d
    1d72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <main+0x10d2>
    1d7a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d7c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);

		PORTA = (PORTA&0xC0) | (1<<1);
    1d7e:	ab e3       	ldi	r26, 0x3B	; 59
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	eb e3       	ldi	r30, 0x3B	; 59
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	80 7c       	andi	r24, 0xC0	; 192
    1d8a:	82 60       	ori	r24, 0x02	; 2
    1d8c:	8c 93       	st	X, r24
		PORTC = (PORTC&0xF0) | (hour1&0x0F);
    1d8e:	a5 e3       	ldi	r26, 0x35	; 53
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e5 e3       	ldi	r30, 0x35	; 53
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	98 2f       	mov	r25, r24
    1d9a:	90 7f       	andi	r25, 0xF0	; 240
    1d9c:	80 91 70 00 	lds	r24, 0x0070
    1da0:	8f 70       	andi	r24, 0x0F	; 15
    1da2:	89 2b       	or	r24, r25
    1da4:	8c 93       	st	X, r24
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	a0 e0       	ldi	r26, 0x00	; 0
    1dac:	b0 e4       	ldi	r27, 0x40	; 64
    1dae:	89 8f       	std	Y+25, r24	; 0x19
    1db0:	9a 8f       	std	Y+26, r25	; 0x1a
    1db2:	ab 8f       	std	Y+27, r26	; 0x1b
    1db4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db6:	69 8d       	ldd	r22, Y+25	; 0x19
    1db8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	4a e7       	ldi	r20, 0x7A	; 122
    1dc4:	55 e4       	ldi	r21, 0x45	; 69
    1dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	8d 8b       	std	Y+21, r24	; 0x15
    1dd0:	9e 8b       	std	Y+22, r25	; 0x16
    1dd2:	af 8b       	std	Y+23, r26	; 0x17
    1dd4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dd6:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dda:	8f 89       	ldd	r24, Y+23	; 0x17
    1ddc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e8       	ldi	r20, 0x80	; 128
    1de4:	5f e3       	ldi	r21, 0x3F	; 63
    1de6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dea:	88 23       	and	r24, r24
    1dec:	2c f4       	brge	.+10     	; 0x1df8 <main+0x1154>
		__ticks = 1;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	9c 8b       	std	Y+20, r25	; 0x14
    1df4:	8b 8b       	std	Y+19, r24	; 0x13
    1df6:	3f c0       	rjmp	.+126    	; 0x1e76 <main+0x11d2>
	else if (__tmp > 65535)
    1df8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfa:	7e 89       	ldd	r23, Y+22	; 0x16
    1dfc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfe:	98 8d       	ldd	r25, Y+24	; 0x18
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	3f ef       	ldi	r19, 0xFF	; 255
    1e04:	4f e7       	ldi	r20, 0x7F	; 127
    1e06:	57 e4       	ldi	r21, 0x47	; 71
    1e08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e0c:	18 16       	cp	r1, r24
    1e0e:	4c f5       	brge	.+82     	; 0x1e62 <main+0x11be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e10:	69 8d       	ldd	r22, Y+25	; 0x19
    1e12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e2       	ldi	r20, 0x20	; 32
    1e1e:	51 e4       	ldi	r21, 0x41	; 65
    1e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	bc 01       	movw	r22, r24
    1e2a:	cd 01       	movw	r24, r26
    1e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	9c 8b       	std	Y+20, r25	; 0x14
    1e36:	8b 8b       	std	Y+19, r24	; 0x13
    1e38:	0f c0       	rjmp	.+30     	; 0x1e58 <main+0x11b4>
    1e3a:	80 e9       	ldi	r24, 0x90	; 144
    1e3c:	91 e0       	ldi	r25, 0x01	; 1
    1e3e:	9a 8b       	std	Y+18, r25	; 0x12
    1e40:	89 8b       	std	Y+17, r24	; 0x11
    1e42:	89 89       	ldd	r24, Y+17	; 0x11
    1e44:	9a 89       	ldd	r25, Y+18	; 0x12
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <main+0x11a2>
    1e4a:	9a 8b       	std	Y+18, r25	; 0x12
    1e4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e50:	9c 89       	ldd	r25, Y+20	; 0x14
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	9c 8b       	std	Y+20, r25	; 0x14
    1e56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e58:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	69 f7       	brne	.-38     	; 0x1e3a <main+0x1196>
    1e60:	14 c0       	rjmp	.+40     	; 0x1e8a <main+0x11e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e62:	6d 89       	ldd	r22, Y+21	; 0x15
    1e64:	7e 89       	ldd	r23, Y+22	; 0x16
    1e66:	8f 89       	ldd	r24, Y+23	; 0x17
    1e68:	98 8d       	ldd	r25, Y+24	; 0x18
    1e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	9c 8b       	std	Y+20, r25	; 0x14
    1e74:	8b 8b       	std	Y+19, r24	; 0x13
    1e76:	8b 89       	ldd	r24, Y+19	; 0x13
    1e78:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7a:	98 8b       	std	Y+16, r25	; 0x10
    1e7c:	8f 87       	std	Y+15, r24	; 0x0f
    1e7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e80:	98 89       	ldd	r25, Y+16	; 0x10
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	f1 f7       	brne	.-4      	; 0x1e82 <main+0x11de>
    1e86:	98 8b       	std	Y+16, r25	; 0x10
    1e88:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);

		PORTA = (PORTA&0xC0) | (1<<0);
    1e8a:	ab e3       	ldi	r26, 0x3B	; 59
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	eb e3       	ldi	r30, 0x3B	; 59
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	80 7c       	andi	r24, 0xC0	; 192
    1e96:	81 60       	ori	r24, 0x01	; 1
    1e98:	8c 93       	st	X, r24
		PORTC = (PORTC&0xF0) | (hour2&0x0F);
    1e9a:	a5 e3       	ldi	r26, 0x35	; 53
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e5 e3       	ldi	r30, 0x35	; 53
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	98 2f       	mov	r25, r24
    1ea6:	90 7f       	andi	r25, 0xF0	; 240
    1ea8:	80 91 71 00 	lds	r24, 0x0071
    1eac:	8f 70       	andi	r24, 0x0F	; 15
    1eae:	89 2b       	or	r24, r25
    1eb0:	8c 93       	st	X, r24
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	a0 e0       	ldi	r26, 0x00	; 0
    1eb8:	b0 e4       	ldi	r27, 0x40	; 64
    1eba:	8b 87       	std	Y+11, r24	; 0x0b
    1ebc:	9c 87       	std	Y+12, r25	; 0x0c
    1ebe:	ad 87       	std	Y+13, r26	; 0x0d
    1ec0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	4a e7       	ldi	r20, 0x7A	; 122
    1ed0:	55 e4       	ldi	r21, 0x45	; 69
    1ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	8f 83       	std	Y+7, r24	; 0x07
    1edc:	98 87       	std	Y+8, r25	; 0x08
    1ede:	a9 87       	std	Y+9, r26	; 0x09
    1ee0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee4:	78 85       	ldd	r23, Y+8	; 0x08
    1ee6:	89 85       	ldd	r24, Y+9	; 0x09
    1ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e8       	ldi	r20, 0x80	; 128
    1ef0:	5f e3       	ldi	r21, 0x3F	; 63
    1ef2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ef6:	88 23       	and	r24, r24
    1ef8:	2c f4       	brge	.+10     	; 0x1f04 <main+0x1260>
		__ticks = 1;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	9e 83       	std	Y+6, r25	; 0x06
    1f00:	8d 83       	std	Y+5, r24	; 0x05
    1f02:	40 c0       	rjmp	.+128    	; 0x1f84 <main+0x12e0>
	else if (__tmp > 65535)
    1f04:	6f 81       	ldd	r22, Y+7	; 0x07
    1f06:	78 85       	ldd	r23, Y+8	; 0x08
    1f08:	89 85       	ldd	r24, Y+9	; 0x09
    1f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	3f ef       	ldi	r19, 0xFF	; 255
    1f10:	4f e7       	ldi	r20, 0x7F	; 127
    1f12:	57 e4       	ldi	r21, 0x47	; 71
    1f14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f18:	18 16       	cp	r1, r24
    1f1a:	54 f5       	brge	.+84     	; 0x1f70 <main+0x12cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e2       	ldi	r20, 0x20	; 32
    1f2a:	51 e4       	ldi	r21, 0x41	; 65
    1f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	bc 01       	movw	r22, r24
    1f36:	cd 01       	movw	r24, r26
    1f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	9e 83       	std	Y+6, r25	; 0x06
    1f42:	8d 83       	std	Y+5, r24	; 0x05
    1f44:	0f c0       	rjmp	.+30     	; 0x1f64 <main+0x12c0>
    1f46:	80 e9       	ldi	r24, 0x90	; 144
    1f48:	91 e0       	ldi	r25, 0x01	; 1
    1f4a:	9c 83       	std	Y+4, r25	; 0x04
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	9c 81       	ldd	r25, Y+4	; 0x04
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	f1 f7       	brne	.-4      	; 0x1f52 <main+0x12ae>
    1f56:	9c 83       	std	Y+4, r25	; 0x04
    1f58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	9e 83       	std	Y+6, r25	; 0x06
    1f62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f64:	8d 81       	ldd	r24, Y+5	; 0x05
    1f66:	9e 81       	ldd	r25, Y+6	; 0x06
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	69 f7       	brne	.-38     	; 0x1f46 <main+0x12a2>
    1f6c:	0c 94 71 06 	jmp	0xce2	; 0xce2 <main+0x3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f70:	6f 81       	ldd	r22, Y+7	; 0x07
    1f72:	78 85       	ldd	r23, Y+8	; 0x08
    1f74:	89 85       	ldd	r24, Y+9	; 0x09
    1f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	9e 83       	std	Y+6, r25	; 0x06
    1f82:	8d 83       	std	Y+5, r24	; 0x05
    1f84:	8d 81       	ldd	r24, Y+5	; 0x05
    1f86:	9e 81       	ldd	r25, Y+6	; 0x06
    1f88:	9a 83       	std	Y+2, r25	; 0x02
    1f8a:	89 83       	std	Y+1, r24	; 0x01
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <main+0x12ec>
    1f94:	9a 83       	std	Y+2, r25	; 0x02
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	0c 94 71 06 	jmp	0xce2	; 0xce2 <main+0x3e>

00001f9c <Timer1_Init>:
	}
}

//Peripherals initialization
void Timer1_Init(void)
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
	/*A we work with 16 MHz
	 * Choose CTC mode and select 256 prescaler and
	 * put 62500 in comparator register and open interrupt
	 * to make interrupt every one second*/
	TCCR1A = (1<< FOC1A) | (1<< FOC1B);
    1fa4:	ef e4       	ldi	r30, 0x4F	; 79
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	8c e0       	ldi	r24, 0x0C	; 12
    1faa:	80 83       	st	Z, r24
	TCCR1B = (1<< WGM12) | (1<<CS12);
    1fac:	ee e4       	ldi	r30, 0x4E	; 78
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	8c e0       	ldi	r24, 0x0C	; 12
    1fb2:	80 83       	st	Z, r24
	TCNT1 =0;
    1fb4:	ec e4       	ldi	r30, 0x4C	; 76
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	11 82       	std	Z+1, r1	; 0x01
    1fba:	10 82       	st	Z, r1
	OCR1A = 62500;
    1fbc:	ea e4       	ldi	r30, 0x4A	; 74
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	84 e2       	ldi	r24, 0x24	; 36
    1fc2:	94 ef       	ldi	r25, 0xF4	; 244
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE1A);
    1fc8:	a9 e5       	ldi	r26, 0x59	; 89
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e9 e5       	ldi	r30, 0x59	; 89
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	80 61       	ori	r24, 0x10	; 16
    1fd4:	8c 93       	st	X, r24
	SREG |= (1<<7);
    1fd6:	af e5       	ldi	r26, 0x5F	; 95
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	ef e5       	ldi	r30, 0x5F	; 95
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	80 68       	ori	r24, 0x80	; 128
    1fe2:	8c 93       	st	X, r24
}
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	08 95       	ret

00001fea <Segment_Iint>:
void Segment_Iint(void)
{
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
	DDRC |= 0x0F; // Set first 4 pins output for Decoder
    1ff2:	a4 e3       	ldi	r26, 0x34	; 52
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e4 e3       	ldi	r30, 0x34	; 52
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	8f 60       	ori	r24, 0x0F	; 15
    1ffe:	8c 93       	st	X, r24
	DDRA |= 0x3F; //set first 6 pins output for multiplexed
    2000:	aa e3       	ldi	r26, 0x3A	; 58
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	ea e3       	ldi	r30, 0x3A	; 58
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	8f 63       	ori	r24, 0x3F	; 63
    200c:	8c 93       	st	X, r24
}
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <Mode_button_Iint>:
void Mode_button_Iint(void)
{
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
	DDRB &= ~(1<<PB7);    // Set  pin 7 in PORTB as input for button
    201c:	a7 e3       	ldi	r26, 0x37	; 55
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e7 e3       	ldi	r30, 0x37	; 55
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	8f 77       	andi	r24, 0x7F	; 127
    2028:	8c 93       	st	X, r24
	PORTB |= (1<<PB7);    // Set  pin 7 in PORTB with value 1 for internal pull up
    202a:	a8 e3       	ldi	r26, 0x38	; 56
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e8 e3       	ldi	r30, 0x38	; 56
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	80 68       	ori	r24, 0x80	; 128
    2036:	8c 93       	st	X, r24
}
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <Mode_led_Iint>:
void Mode_led_Iint(void)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1<<PD4) | (1<<PD5);    // Set  pin 4 & 5 in PORTD as output for led of modes
    2046:	a1 e3       	ldi	r26, 0x31	; 49
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e1 e3       	ldi	r30, 0x31	; 49
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	80 63       	ori	r24, 0x30	; 48
    2052:	8c 93       	st	X, r24
	PORTD &= ~(1<<PD4) & ~(1<<PD5); //Set  pin 4 & 5 in PORTD with value 0 turn off leds
    2054:	a2 e3       	ldi	r26, 0x32	; 50
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e2 e3       	ldi	r30, 0x32	; 50
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	8f 7c       	andi	r24, 0xCF	; 207
    2060:	8c 93       	st	X, r24
}
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	08 95       	ret

00002068 <buzzer_Iint>:
void buzzer_Iint(void)
{
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1<<PD0);    // Set  pin 0 in PORTD as output for buzzer
    2070:	a1 e3       	ldi	r26, 0x31	; 49
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	e1 e3       	ldi	r30, 0x31	; 49
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	81 60       	ori	r24, 0x01	; 1
    207c:	8c 93       	st	X, r24
	PORTD &= ~(1<<PD0); //Set  pin 0 in PORTD with value 0 turn off buzzer
    207e:	a2 e3       	ldi	r26, 0x32	; 50
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e2 e3       	ldi	r30, 0x32	; 50
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	8e 7f       	andi	r24, 0xFE	; 254
    208a:	8c 93       	st	X, r24
}
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <reset_button_INT0_Iint>:
void reset_button_INT0_Iint(void)
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
	DDRD  &= (~(1<<PD2));               // Configure INT0/PD2 as input pin
    209a:	a1 e3       	ldi	r26, 0x31	; 49
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e1 e3       	ldi	r30, 0x31	; 49
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	8b 7f       	andi	r24, 0xFB	; 251
    20a6:	8c 93       	st	X, r24
	PORTD |= (1<<PD2);    				// Set  pin 2 in PORTD with value 1 for internal pull up
    20a8:	a2 e3       	ldi	r26, 0x32	; 50
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e2 e3       	ldi	r30, 0x32	; 50
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	84 60       	ori	r24, 0x04	; 4
    20b4:	8c 93       	st	X, r24
	MCUCR |=(1<<ISC01);  				// Trigger INT0 with the falling edge
    20b6:	a5 e5       	ldi	r26, 0x55	; 85
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	e5 e5       	ldi	r30, 0x55	; 85
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	82 60       	ori	r24, 0x02	; 2
    20c2:	8c 93       	st	X, r24
	GICR  |= (1<<INT0);                 // Enable external interrupt pin INT0
    20c4:	ab e5       	ldi	r26, 0x5B	; 91
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	eb e5       	ldi	r30, 0x5B	; 91
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	80 64       	ori	r24, 0x40	; 64
    20d0:	8c 93       	st	X, r24
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
    20d2:	af e5       	ldi	r26, 0x5F	; 95
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	ef e5       	ldi	r30, 0x5F	; 95
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	80 68       	ori	r24, 0x80	; 128
    20de:	8c 93       	st	X, r24

}
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret

000020e6 <resume_button_INT2_Iint>:
void resume_button_INT2_Iint(void)
{
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
	DDRB  &= (~(1<<PB2));               // Configure INT2/PB2 as input pin
    20ee:	a7 e3       	ldi	r26, 0x37	; 55
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	e7 e3       	ldi	r30, 0x37	; 55
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	8b 7f       	andi	r24, 0xFB	; 251
    20fa:	8c 93       	st	X, r24
	PORTB |= (1<<PB2);    				// Set  pin 2 in PORTB with value 1 for internal pull up
    20fc:	a8 e3       	ldi	r26, 0x38	; 56
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e8 e3       	ldi	r30, 0x38	; 56
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	84 60       	ori	r24, 0x04	; 4
    2108:	8c 93       	st	X, r24
	MCUCSR &=~(1<<ISC2);  				// Trigger INT2 with the falling edge
    210a:	a4 e5       	ldi	r26, 0x54	; 84
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e4 e5       	ldi	r30, 0x54	; 84
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	8f 7b       	andi	r24, 0xBF	; 191
    2116:	8c 93       	st	X, r24
	GICR  |= (1<<INT2);                 // Enable external interrupt pin INT2
    2118:	ab e5       	ldi	r26, 0x5B	; 91
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	eb e5       	ldi	r30, 0x5B	; 91
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	80 62       	ori	r24, 0x20	; 32
    2124:	8c 93       	st	X, r24
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
    2126:	af e5       	ldi	r26, 0x5F	; 95
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	ef e5       	ldi	r30, 0x5F	; 95
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	80 68       	ori	r24, 0x80	; 128
    2132:	8c 93       	st	X, r24

}
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <pause_button_INT1_Iint>:
void pause_button_INT1_Iint(void)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
	DDRD  &= (~(1<<PD3));               // Configure INT1/PD3 as input pin
    2142:	a1 e3       	ldi	r26, 0x31	; 49
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e1 e3       	ldi	r30, 0x31	; 49
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	87 7f       	andi	r24, 0xF7	; 247
    214e:	8c 93       	st	X, r24
	MCUCR |=(1<<ISC11);  				// Trigger INT0 with the falling edge
    2150:	a5 e5       	ldi	r26, 0x55	; 85
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	e5 e5       	ldi	r30, 0x55	; 85
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	88 60       	ori	r24, 0x08	; 8
    215c:	8c 93       	st	X, r24
	GICR  |= (1<<INT1);                 // Enable external interrupt pin INT0
    215e:	ab e5       	ldi	r26, 0x5B	; 91
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	eb e5       	ldi	r30, 0x5B	; 91
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	80 68       	ori	r24, 0x80	; 128
    216a:	8c 93       	st	X, r24
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
    216c:	af e5       	ldi	r26, 0x5F	; 95
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	ef e5       	ldi	r30, 0x5F	; 95
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	80 68       	ori	r24, 0x80	; 128
    2178:	8c 93       	st	X, r24
}
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <Set_buttons_Iint>:
void Set_buttons_Iint(void)
{
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
	DDRB &= ~0x7B;    		// Set  pins 0,1,3,4,5 & 6 in PORTB as input for set buttons
    2188:	a7 e3       	ldi	r26, 0x37	; 55
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	e7 e3       	ldi	r30, 0x37	; 55
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	84 78       	andi	r24, 0x84	; 132
    2194:	8c 93       	st	X, r24
	PORTB |= 0x7B;  	// Set  pins 0,1,3,4,5 & 6 in PORTB with value 1 for internal pull up
    2196:	a8 e3       	ldi	r26, 0x38	; 56
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e8 e3       	ldi	r30, 0x38	; 56
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	8b 67       	ori	r24, 0x7B	; 123
    21a2:	8c 93       	st	X, r24
}
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <hour_increment>:

//Function Definition
void hour_increment (void)
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
	if(hour2==2 && hour1==3) //Loop every day if want to be 100 hour change this values to 99
    21b2:	80 91 71 00 	lds	r24, 0x0071
    21b6:	82 30       	cpi	r24, 0x02	; 2
    21b8:	49 f4       	brne	.+18     	; 0x21cc <hour_increment+0x22>
    21ba:	80 91 70 00 	lds	r24, 0x0070
    21be:	83 30       	cpi	r24, 0x03	; 3
    21c0:	29 f4       	brne	.+10     	; 0x21cc <hour_increment+0x22>
	{
		hour1=0;
    21c2:	10 92 70 00 	sts	0x0070, r1
		hour2=0;
    21c6:	10 92 71 00 	sts	0x0071, r1
    21ca:	11 c0       	rjmp	.+34     	; 0x21ee <hour_increment+0x44>
	}
	else if(hour1==9)
    21cc:	80 91 70 00 	lds	r24, 0x0070
    21d0:	89 30       	cpi	r24, 0x09	; 9
    21d2:	41 f4       	brne	.+16     	; 0x21e4 <hour_increment+0x3a>
	{
		hour1=0;
    21d4:	10 92 70 00 	sts	0x0070, r1
		hour2++;
    21d8:	80 91 71 00 	lds	r24, 0x0071
    21dc:	8f 5f       	subi	r24, 0xFF	; 255
    21de:	80 93 71 00 	sts	0x0071, r24
    21e2:	05 c0       	rjmp	.+10     	; 0x21ee <hour_increment+0x44>
	}
	else
	{
		hour1++;
    21e4:	80 91 70 00 	lds	r24, 0x0070
    21e8:	8f 5f       	subi	r24, 0xFF	; 255
    21ea:	80 93 70 00 	sts	0x0070, r24
	}
}
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <min_increment>:
void min_increment (void)
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
	if(min2==5 && min1==9)
    21fc:	80 91 6f 00 	lds	r24, 0x006F
    2200:	85 30       	cpi	r24, 0x05	; 5
    2202:	59 f4       	brne	.+22     	; 0x221a <min_increment+0x26>
    2204:	80 91 6e 00 	lds	r24, 0x006E
    2208:	89 30       	cpi	r24, 0x09	; 9
    220a:	39 f4       	brne	.+14     	; 0x221a <min_increment+0x26>
	{
		min1=0;
    220c:	10 92 6e 00 	sts	0x006E, r1
		min2=0;
    2210:	10 92 6f 00 	sts	0x006F, r1
		hour_increment();
    2214:	0e 94 d5 10 	call	0x21aa	; 0x21aa <hour_increment>
    2218:	11 c0       	rjmp	.+34     	; 0x223c <min_increment+0x48>
	}
	else if (min1==9)
    221a:	80 91 6e 00 	lds	r24, 0x006E
    221e:	89 30       	cpi	r24, 0x09	; 9
    2220:	41 f4       	brne	.+16     	; 0x2232 <min_increment+0x3e>
	{
		min1=0;
    2222:	10 92 6e 00 	sts	0x006E, r1
		min2++;
    2226:	80 91 6f 00 	lds	r24, 0x006F
    222a:	8f 5f       	subi	r24, 0xFF	; 255
    222c:	80 93 6f 00 	sts	0x006F, r24
    2230:	05 c0       	rjmp	.+10     	; 0x223c <min_increment+0x48>
	}
	else
	{
		min1++;
    2232:	80 91 6e 00 	lds	r24, 0x006E
    2236:	8f 5f       	subi	r24, 0xFF	; 255
    2238:	80 93 6e 00 	sts	0x006E, r24
	}
}
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <sec_increment>:
void sec_increment (void)
{
    2242:	df 93       	push	r29
    2244:	cf 93       	push	r28
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
	//Close alarm
	PORTD &= ~(1<<PD0);
    224a:	a2 e3       	ldi	r26, 0x32	; 50
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	e2 e3       	ldi	r30, 0x32	; 50
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	8e 7f       	andi	r24, 0xFE	; 254
    2256:	8c 93       	st	X, r24
	if(sec2==5 && sec1==9)
    2258:	80 91 6d 00 	lds	r24, 0x006D
    225c:	85 30       	cpi	r24, 0x05	; 5
    225e:	59 f4       	brne	.+22     	; 0x2276 <sec_increment+0x34>
    2260:	80 91 6c 00 	lds	r24, 0x006C
    2264:	89 30       	cpi	r24, 0x09	; 9
    2266:	39 f4       	brne	.+14     	; 0x2276 <sec_increment+0x34>
	{
		sec1=0;
    2268:	10 92 6c 00 	sts	0x006C, r1
		sec2=0;
    226c:	10 92 6d 00 	sts	0x006D, r1
		min_increment();
    2270:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <min_increment>
    2274:	11 c0       	rjmp	.+34     	; 0x2298 <sec_increment+0x56>
	}
	else if (sec1==9)
    2276:	80 91 6c 00 	lds	r24, 0x006C
    227a:	89 30       	cpi	r24, 0x09	; 9
    227c:	41 f4       	brne	.+16     	; 0x228e <sec_increment+0x4c>
	{
		sec1=0;
    227e:	10 92 6c 00 	sts	0x006C, r1
		sec2++;
    2282:	80 91 6d 00 	lds	r24, 0x006D
    2286:	8f 5f       	subi	r24, 0xFF	; 255
    2288:	80 93 6d 00 	sts	0x006D, r24
    228c:	05 c0       	rjmp	.+10     	; 0x2298 <sec_increment+0x56>
	}
	else
	{
		sec1++;
    228e:	80 91 6c 00 	lds	r24, 0x006C
    2292:	8f 5f       	subi	r24, 0xFF	; 255
    2294:	80 93 6c 00 	sts	0x006C, r24
	}
}
    2298:	cf 91       	pop	r28
    229a:	df 91       	pop	r29
    229c:	08 95       	ret

0000229e <hour_decrement>:
void hour_decrement (void)
{
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
	if(hour2==0 && hour1==0)
    22a6:	80 91 71 00 	lds	r24, 0x0071
    22aa:	88 23       	and	r24, r24
    22ac:	21 f4       	brne	.+8      	; 0x22b6 <hour_decrement+0x18>
    22ae:	80 91 70 00 	lds	r24, 0x0070
    22b2:	88 23       	and	r24, r24
    22b4:	91 f0       	breq	.+36     	; 0x22da <hour_decrement+0x3c>
	{

	}
	else if(hour1==0)
    22b6:	80 91 70 00 	lds	r24, 0x0070
    22ba:	88 23       	and	r24, r24
    22bc:	49 f4       	brne	.+18     	; 0x22d0 <hour_decrement+0x32>
	{
		hour2--;
    22be:	80 91 71 00 	lds	r24, 0x0071
    22c2:	81 50       	subi	r24, 0x01	; 1
    22c4:	80 93 71 00 	sts	0x0071, r24
		hour1=9;
    22c8:	89 e0       	ldi	r24, 0x09	; 9
    22ca:	80 93 70 00 	sts	0x0070, r24
    22ce:	05 c0       	rjmp	.+10     	; 0x22da <hour_decrement+0x3c>
	}
	else
	{
		hour1--;
    22d0:	80 91 70 00 	lds	r24, 0x0070
    22d4:	81 50       	subi	r24, 0x01	; 1
    22d6:	80 93 70 00 	sts	0x0070, r24
	}
}
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <min_decrement>:
void min_decrement (void)
{
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
	if(min2==0 && min1==0)
    22e8:	80 91 6f 00 	lds	r24, 0x006F
    22ec:	88 23       	and	r24, r24
    22ee:	69 f4       	brne	.+26     	; 0x230a <min_decrement+0x2a>
    22f0:	80 91 6e 00 	lds	r24, 0x006E
    22f4:	88 23       	and	r24, r24
    22f6:	49 f4       	brne	.+18     	; 0x230a <min_decrement+0x2a>
	{
		min1=9;
    22f8:	89 e0       	ldi	r24, 0x09	; 9
    22fa:	80 93 6e 00 	sts	0x006E, r24
		min2=5;
    22fe:	85 e0       	ldi	r24, 0x05	; 5
    2300:	80 93 6f 00 	sts	0x006F, r24
		hour_decrement();
    2304:	0e 94 4f 11 	call	0x229e	; 0x229e <hour_decrement>
    2308:	12 c0       	rjmp	.+36     	; 0x232e <min_decrement+0x4e>
	}
	else if(min1==0)
    230a:	80 91 6e 00 	lds	r24, 0x006E
    230e:	88 23       	and	r24, r24
    2310:	49 f4       	brne	.+18     	; 0x2324 <min_decrement+0x44>
	{
		min2--;
    2312:	80 91 6f 00 	lds	r24, 0x006F
    2316:	81 50       	subi	r24, 0x01	; 1
    2318:	80 93 6f 00 	sts	0x006F, r24
		min1=9;
    231c:	89 e0       	ldi	r24, 0x09	; 9
    231e:	80 93 6e 00 	sts	0x006E, r24
    2322:	05 c0       	rjmp	.+10     	; 0x232e <min_decrement+0x4e>
	}
	else
	{
		min1--;
    2324:	80 91 6e 00 	lds	r24, 0x006E
    2328:	81 50       	subi	r24, 0x01	; 1
    232a:	80 93 6e 00 	sts	0x006E, r24
	}
}
    232e:	cf 91       	pop	r28
    2330:	df 91       	pop	r29
    2332:	08 95       	ret

00002334 <sec_decrement>:
void sec_decrement (void)
{
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
	if(hour2==0 && hour1==0 && min2==0 && min1==0 && sec2==0 && sec1==0)
    233c:	80 91 71 00 	lds	r24, 0x0071
    2340:	88 23       	and	r24, r24
    2342:	e1 f4       	brne	.+56     	; 0x237c <sec_decrement+0x48>
    2344:	80 91 70 00 	lds	r24, 0x0070
    2348:	88 23       	and	r24, r24
    234a:	c1 f4       	brne	.+48     	; 0x237c <sec_decrement+0x48>
    234c:	80 91 6f 00 	lds	r24, 0x006F
    2350:	88 23       	and	r24, r24
    2352:	a1 f4       	brne	.+40     	; 0x237c <sec_decrement+0x48>
    2354:	80 91 6e 00 	lds	r24, 0x006E
    2358:	88 23       	and	r24, r24
    235a:	81 f4       	brne	.+32     	; 0x237c <sec_decrement+0x48>
    235c:	80 91 6d 00 	lds	r24, 0x006D
    2360:	88 23       	and	r24, r24
    2362:	61 f4       	brne	.+24     	; 0x237c <sec_decrement+0x48>
    2364:	80 91 6c 00 	lds	r24, 0x006C
    2368:	88 23       	and	r24, r24
    236a:	41 f4       	brne	.+16     	; 0x237c <sec_decrement+0x48>
	{
		// Alarm ring
		PORTD |= (1<<PD0);
    236c:	a2 e3       	ldi	r26, 0x32	; 50
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e2 e3       	ldi	r30, 0x32	; 50
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	81 60       	ori	r24, 0x01	; 1
    2378:	8c 93       	st	X, r24
    237a:	23 c0       	rjmp	.+70     	; 0x23c2 <sec_decrement+0x8e>
	}
	else if(sec2==0 && sec1==0)
    237c:	80 91 6d 00 	lds	r24, 0x006D
    2380:	88 23       	and	r24, r24
    2382:	69 f4       	brne	.+26     	; 0x239e <sec_decrement+0x6a>
    2384:	80 91 6c 00 	lds	r24, 0x006C
    2388:	88 23       	and	r24, r24
    238a:	49 f4       	brne	.+18     	; 0x239e <sec_decrement+0x6a>
	{
		sec1=9;
    238c:	89 e0       	ldi	r24, 0x09	; 9
    238e:	80 93 6c 00 	sts	0x006C, r24
		sec2=5;
    2392:	85 e0       	ldi	r24, 0x05	; 5
    2394:	80 93 6d 00 	sts	0x006D, r24
		min_decrement();
    2398:	0e 94 70 11 	call	0x22e0	; 0x22e0 <min_decrement>
    239c:	12 c0       	rjmp	.+36     	; 0x23c2 <sec_decrement+0x8e>
	}
	else if(sec1==0)
    239e:	80 91 6c 00 	lds	r24, 0x006C
    23a2:	88 23       	and	r24, r24
    23a4:	49 f4       	brne	.+18     	; 0x23b8 <sec_decrement+0x84>
	{
		sec2--;
    23a6:	80 91 6d 00 	lds	r24, 0x006D
    23aa:	81 50       	subi	r24, 0x01	; 1
    23ac:	80 93 6d 00 	sts	0x006D, r24
		sec1=9;
    23b0:	89 e0       	ldi	r24, 0x09	; 9
    23b2:	80 93 6c 00 	sts	0x006C, r24
    23b6:	05 c0       	rjmp	.+10     	; 0x23c2 <sec_decrement+0x8e>
	}
	else
	{
		sec1--;
    23b8:	80 91 6c 00 	lds	r24, 0x006C
    23bc:	81 50       	subi	r24, 0x01	; 1
    23be:	80 93 6c 00 	sts	0x006C, r24
	}
}
    23c2:	cf 91       	pop	r28
    23c4:	df 91       	pop	r29
    23c6:	08 95       	ret

000023c8 <pause>:
void pause (void)
{
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1<<CS12);
    23d0:	ae e4       	ldi	r26, 0x4E	; 78
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	ee e4       	ldi	r30, 0x4E	; 78
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	8b 7f       	andi	r24, 0xFB	; 251
    23dc:	8c 93       	st	X, r24
	pause_flag=1;
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	80 93 72 00 	sts	0x0072, r24
}
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	08 95       	ret

000023ea <resume>:
void resume (void)
{
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= (1<<CS12);
    23f2:	ae e4       	ldi	r26, 0x4E	; 78
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	ee e4       	ldi	r30, 0x4E	; 78
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	84 60       	ori	r24, 0x04	; 4
    23fe:	8c 93       	st	X, r24
	pause_flag=0;
    2400:	10 92 72 00 	sts	0x0072, r1
}
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <reset>:
void reset (void)
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
	sec1=0;
    2412:	10 92 6c 00 	sts	0x006C, r1
	sec2=0;
    2416:	10 92 6d 00 	sts	0x006D, r1
	min1=0;
    241a:	10 92 6e 00 	sts	0x006E, r1
	min2=0;
    241e:	10 92 6f 00 	sts	0x006F, r1
	hour1=0;
    2422:	10 92 70 00 	sts	0x0070, r1
	hour2=0;
    2426:	10 92 71 00 	sts	0x0071, r1
}
    242a:	cf 91       	pop	r28
    242c:	df 91       	pop	r29
    242e:	08 95       	ret

00002430 <__prologue_saves__>:
    2430:	2f 92       	push	r2
    2432:	3f 92       	push	r3
    2434:	4f 92       	push	r4
    2436:	5f 92       	push	r5
    2438:	6f 92       	push	r6
    243a:	7f 92       	push	r7
    243c:	8f 92       	push	r8
    243e:	9f 92       	push	r9
    2440:	af 92       	push	r10
    2442:	bf 92       	push	r11
    2444:	cf 92       	push	r12
    2446:	df 92       	push	r13
    2448:	ef 92       	push	r14
    244a:	ff 92       	push	r15
    244c:	0f 93       	push	r16
    244e:	1f 93       	push	r17
    2450:	cf 93       	push	r28
    2452:	df 93       	push	r29
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	ca 1b       	sub	r28, r26
    245a:	db 0b       	sbc	r29, r27
    245c:	0f b6       	in	r0, 0x3f	; 63
    245e:	f8 94       	cli
    2460:	de bf       	out	0x3e, r29	; 62
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	cd bf       	out	0x3d, r28	; 61
    2466:	09 94       	ijmp

00002468 <__epilogue_restores__>:
    2468:	2a 88       	ldd	r2, Y+18	; 0x12
    246a:	39 88       	ldd	r3, Y+17	; 0x11
    246c:	48 88       	ldd	r4, Y+16	; 0x10
    246e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2470:	6e 84       	ldd	r6, Y+14	; 0x0e
    2472:	7d 84       	ldd	r7, Y+13	; 0x0d
    2474:	8c 84       	ldd	r8, Y+12	; 0x0c
    2476:	9b 84       	ldd	r9, Y+11	; 0x0b
    2478:	aa 84       	ldd	r10, Y+10	; 0x0a
    247a:	b9 84       	ldd	r11, Y+9	; 0x09
    247c:	c8 84       	ldd	r12, Y+8	; 0x08
    247e:	df 80       	ldd	r13, Y+7	; 0x07
    2480:	ee 80       	ldd	r14, Y+6	; 0x06
    2482:	fd 80       	ldd	r15, Y+5	; 0x05
    2484:	0c 81       	ldd	r16, Y+4	; 0x04
    2486:	1b 81       	ldd	r17, Y+3	; 0x03
    2488:	aa 81       	ldd	r26, Y+2	; 0x02
    248a:	b9 81       	ldd	r27, Y+1	; 0x01
    248c:	ce 0f       	add	r28, r30
    248e:	d1 1d       	adc	r29, r1
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	de bf       	out	0x3e, r29	; 62
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	cd bf       	out	0x3d, r28	; 61
    249a:	ed 01       	movw	r28, r26
    249c:	08 95       	ret

0000249e <_exit>:
    249e:	f8 94       	cli

000024a0 <__stop_program>:
    24a0:	ff cf       	rjmp	.-2      	; 0x24a0 <__stop_program>
